syntax = "proto3";
package grpcdemo;


// ================================================================================
// DEMO MESSAGES for API Eigen Example
// ================================================================================

// We define the data-types involved in the data transfer. Bear in mind that the amount
// of space in memory that an Integer and a Double occupy is different. Thus it is
// important to know how to breakdown our chunk of bytes.
enum DataType{
    INTEGER = 0;
    DOUBLE = 1;
  }

// Interface definition for Vector
message Vector {
    DataType data_type = 1;
    int32 vector_size = 2;
    bytes vector_as_chunk = 3;
  }

// Interface definition for Matrix
message Matrix {
    DataType data_type = 1;
    int32 matrix_rows = 2;
    int32 matrix_cols = 3;
    bytes matrix_as_chunk = 4;
}

// Request message containing the user's name
message HelloRequest {
    string name = 1;
}

// Response message containing the greeting
message HelloReply {
    string message = 1;
}


// ================================================================================
// DEMO SERVICE for API Eigen Example
// ================================================================================

// Interface exported by the server. Different from REST... You do not need to post
// (store) in the end server the objects of the interface (Vector, Matrix)
service GRPCDemo {

    // Send a greeting
    rpc SayHello (HelloRequest) returns (HelloReply) {}

    // Flip a vector [A, B, C, D] --> [D, C, B, A]
    rpc FlipVector(stream Vector) returns (stream Vector) {}

    // Add two vectors
    rpc AddVectors(stream Vector) returns (stream Vector) {}

    // Multiply two vectors
    rpc MultiplyVectors(stream Vector) returns (stream Vector) {}

    // Add two matrices
    rpc AddMatrices(stream Matrix) returns (stream Matrix) {}

    // Multiply two matrices
    rpc MultiplyMatrices(stream Matrix) returns (stream Matrix) {}
}