[
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#c-grpc-client-module",
        "title": "C++ gRPC client module",
        "section": "C++ gRPC client module",
        "text": "Namespace including the API Eigen Example Client implemented in C++. \nClass containing the basic functionalities to interact with the API Eigen Example server. \nConstruct a new GRPC Client object. \nhost – the host (DNS/IP) where the server is located. Default: 0.0.0.0. \nport – the port through which the server is exposed. Default: 50000. \ndebug_log – whether to show the enhanced debugging logs or not. Default: false. \nDestroy the GRPC Client object. \nMethod to request a greeting from the endpoint server. \nname – the name of the entity requesting the greeting (i.e. us). \nMethod in charge of requesting a vector position flip to the endpoint server. \nvec – the first vector involved in the operation. \nstd::vector<double> \nMethod in charge of requesting a vector addition to the endpoint server. \nvec1 – the first vector involved in the operation. \nvec2 – the second vector involved in the operation. \nstd::vector<double> \nMethod in charge of requesting a vector dot product to the endpoint server. \nvec1 – the first vector involved in the operation. \nvec2 – the second vector involved in the operation. \ndouble \nMethod in charge of requesting a matrix addition to the endpoint server. \nmat1 – the first matrix involved in the operation. \nmat2 – the second matrix involved in the operation. \nstd::vector<std::vector<double>> \nMethod in charge of requesting a matrix multiplication to the endpoint server. \nmat1 – the first matrix involved in the operation. \nmat2 – the second matrix involved in the operation. \nstd::vector<std::vector<double>> \nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Vector messages. \ncontext – the gRPC context. \nvec1 – the vector to be transmitted. \nvec2 – (optional) the second vector to be transmitted. \nstd::vector<std::vector<int>> \nSet the Vector-specific message metadata (i.e. how many partial Vector messages constitute an entire Vector). \ncontext – the gRPC context. \nvec – the vector to be transmitted. \nvec_name – the identifier of the vector. \nstd::vector<int> \nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Matrix messages. \ncontext – the gRPC context. \nmat1 – the first matrix to be transmitted. \nmat2 – the second matrix to be transmitted. \nstd::vector<std::vector<int>> \nSet the Matrix-specific message metadata (i.e. how many partial Matrix messages constitute an entire Matrix). \ncontext – the gRPC context. \nmat – the matrix to be transmitted. \nmat_name – the identifier of the matrix. \nstd::vector<int> \nMethod used to deserialize a Vector message into an std::vector<double> object. \nbytes – the chunk of bytes from where the vector is deserialized. \nlength – the length of the vector we are deserializing. \ntype – the type of data inside the vector (e.g. double, int…). \nstd::vector<double> \nMethod used to serialize an std::vector<double> object into a Vector message. \nvector – the std::vector<double> to be serialized. \nstart – the starting index to serialize. \nend – the last index to serialize (not included). \nstd::string \nMethod used to deserialize a Matrix message into an std::vector<std::vector<double>> object. \nbytes – the chunk of bytes from where the matrix is deserialized. \nrows – the number of rows of the matrix we are deserializing. \ncols – the number of columns of the matrix we are deserializing. \ntype – the type of data inside the matrix (e.g. double, int…). \nstd::vector<std::vector<double>> \nMethod used to serialize an std::vector<std::vector<double>> object into a Matrix message. \nmatrix – the std::vector<std::vector<double>> to be serialized. \nstart – the starting row index to serialize. \nend – the last row index to serialize (not included). \nstd::string \nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Vector messages. \nreader_writer – the writer used for streaming the messages. \nvector – the message to be streamed. \nchunks – number of elements in each individual Vector message. \nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Matrix messages. \nreader_writer – the writer used for streaming the messages. \nmatrix – the message to be streamed. \nchunks – number of elements in each individual Vector message. \nMethod in charge of providing the resulting Vector of an operation requested to the server from a stream of partial Vector messages. \nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \ncontext – the gRPC context. \nstd::vector<double> \nMethod in charge of providing the resulting Matrix of an operation requested to the server from a stream of partial Matrix messages. \nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \ncontext – the gRPC context. \nstd::vector<std::vector<double>> \nA unique pointer to the stub which defines the gRPC connection (Channel). \nBoolean indicating whether to show the debugging logs or not. \nC++ gRPC client module"
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6clientE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6clientE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6clientE",
        "text": "namespace client\n\nNamespace including the API Eigen Example Client implemented in C++. \n\n\n\nclass GRPCClient\n\nClass containing the basic functionalities to interact with the API Eigen Example server. \n\nPublic Functions\n\n\n\nGRPCClient(const std::string host = std::string{\"0.0.0.0\"}, const int port = 50000, const bool debug_log = false)\n\nConstruct a new GRPC Client object. \n\nParameters\n\nhost – the host (DNS/IP) where the server is located. Default: 0.0.0.0. \n\nport – the port through which the server is exposed. Default: 50000. \n\ndebug_log – whether to show the enhanced debugging logs or not. Default: false. \n\n\n\n~GRPCClient()\n\nDestroy the GRPC Client object. \n\n\n\nvoid request_greeting(const std::string &name)\n\nMethod to request a greeting from the endpoint server. \n\nParameters\n\nname – the name of the entity requesting the greeting (i.e. us). \n\n\n\nstd::vector<double> flip_vector(const std::vector<double> &vec)\n\nMethod in charge of requesting a vector position flip to the endpoint server. \n\nParameters\n\nvec – the first vector involved in the operation. \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::vector<double> add_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector addition to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\nstd::vector<double> \n\n\n\ndouble multiply_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector dot product to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\ndouble \n\n\n\nstd::vector<std::vector<double>> add_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix addition to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\n\n\nstd::vector<std::vector<double>> multiply_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix multiplication to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Functions\n\n\n\nstd::vector<std::vector<int>> define_vecstream_metadata(::grpc::ClientContext *context, const std::vector<double> &vec1, const std::vector<double> &vec2 = {})\n\nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Vector messages. \n\nParameters\n\ncontext – the gRPC context. \n\nvec1 – the vector to be transmitted. \n\nvec2 – (optional) the second vector to be transmitted. \n\nReturns\n\nstd::vector<std::vector<int>> \n\n\n\nstd::vector<int> set_vector_metadata(::grpc::ClientContext *context, const std::vector<double> &vec, const std::string &vec_name)\n\nSet the Vector-specific message metadata (i.e. how many partial Vector messages constitute an entire Vector). \n\nParameters\n\ncontext – the gRPC context. \n\nvec – the vector to be transmitted. \n\nvec_name – the identifier of the vector. \n\nReturns\n\nstd::vector<int> \n\n\n\nstd::vector<std::vector<int>> define_matstream_metadata(::grpc::ClientContext *context, const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Matrix messages. \n\nParameters\n\ncontext – the gRPC context. \n\nmat1 – the first matrix to be transmitted. \n\nmat2 – the second matrix to be transmitted. \n\nReturns\n\nstd::vector<std::vector<int>> \n\n\n\nstd::vector<int> set_matrix_metadata(::grpc::ClientContext *context, const std::vector<std::vector<double>> &mat, const std::string &mat_name)\n\nSet the Matrix-specific message metadata (i.e. how many partial Matrix messages constitute an entire Matrix). \n\nParameters\n\ncontext – the gRPC context. \n\nmat – the matrix to be transmitted. \n\nmat_name – the identifier of the matrix. \n\nReturns\n\nstd::vector<int> \n\n\n\nstd::vector<double> deserialize_vector(const std::string &bytes, const int length, grpcdemo::DataType type)\n\nMethod used to deserialize a Vector message into an std::vector<double> object. \n\nParameters\n\nbytes – the chunk of bytes from where the vector is deserialized. \n\nlength – the length of the vector we are deserializing. \n\ntype – the type of data inside the vector (e.g. double, int…). \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::string serialize_vector(const std::vector<double> &vector, const int start, const int end)\n\nMethod used to serialize an std::vector<double> object into a Vector message. \n\nParameters\n\nvector – the std::vector<double> to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nstd::vector<std::vector<double>> deserialize_matrix(const std::string &bytes, const int rows, const int cols, grpcdemo::DataType type)\n\nMethod used to deserialize a Matrix message into an std::vector<std::vector<double>> object. \n\nParameters\n\nbytes – the chunk of bytes from where the matrix is deserialized. \n\nrows – the number of rows of the matrix we are deserializing. \n\ncols – the number of columns of the matrix we are deserializing. \n\ntype – the type of data inside the matrix (e.g. double, int…). \n\nReturns\n\nstd::vector<std::vector<double>> \n\n\n\nstd::string serialize_matrix(const std::vector<std::vector<double>> &matrix, const int start, const int end)\n\nMethod used to serialize an std::vector<std::vector<double>> object into a Matrix message. \n\nParameters\n\nmatrix – the std::vector<std::vector<double>> to be serialized. \n\nstart – the starting row index to serialize. \n\nend – the last row index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nvoid send_vector(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Vector, grpcdemo::Vector>> &reader_writer, const std::vector<double> &vector, const std::vector<int> &chunks)\n\nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Vector messages. \n\nParameters\n\nreader_writer – the writer used for streaming the messages. \n\nvector – the message to be streamed. \n\nchunks – number of elements in each individual Vector message. \n\n\n\nvoid send_matrix(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix>> &reader_writer, const std::vector<std::vector<double>> &matrix, const std::vector<int> &chunks)\n\nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Matrix messages. \n\nParameters\n\nreader_writer – the writer used for streaming the messages. \n\nmatrix – the message to be streamed. \n\nchunks – number of elements in each individual Vector message. \n\n\n\nstd::vector<double> receive_vector(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Vector, grpcdemo::Vector>> &reader_writer, ::grpc::ClientContext *context)\n\nMethod in charge of providing the resulting Vector of an operation requested to the server from a stream of partial Vector messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::vector<std::vector<double>> receive_matrix(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix>> &reader_writer, ::grpc::ClientContext *context)\n\nMethod in charge of providing the resulting Matrix of an operation requested to the server from a stream of partial Matrix messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Members\n\n\n\nstd::unique_ptr<grpcdemo::GRPCDemo::Stub> _stub\n\nA unique pointer to the stub which defines the gRPC connection (Channel). \n\n\n\nbool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClientE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClientE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClientE",
        "text": "class GRPCClient\n\nClass containing the basic functionalities to interact with the API Eigen Example server. \n\nPublic Functions\n\n\n\nGRPCClient(const std::string host = std::string{\"0.0.0.0\"}, const int port = 50000, const bool debug_log = false)\n\nConstruct a new GRPC Client object. \n\nParameters\n\nhost – the host (DNS/IP) where the server is located. Default: 0.0.0.0. \n\nport – the port through which the server is exposed. Default: 50000. \n\ndebug_log – whether to show the enhanced debugging logs or not. Default: false. \n\n\n\n~GRPCClient()\n\nDestroy the GRPC Client object. \n\n\n\nvoid request_greeting(const std::string &name)\n\nMethod to request a greeting from the endpoint server. \n\nParameters\n\nname – the name of the entity requesting the greeting (i.e. us). \n\n\n\nstd::vector<double> flip_vector(const std::vector<double> &vec)\n\nMethod in charge of requesting a vector position flip to the endpoint server. \n\nParameters\n\nvec – the first vector involved in the operation. \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::vector<double> add_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector addition to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\nstd::vector<double> \n\n\n\ndouble multiply_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector dot product to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\ndouble \n\n\n\nstd::vector<std::vector<double>> add_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix addition to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\n\n\nstd::vector<std::vector<double>> multiply_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix multiplication to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Functions\n\n\n\nstd::vector<std::vector<int>> define_vecstream_metadata(::grpc::ClientContext *context, const std::vector<double> &vec1, const std::vector<double> &vec2 = {})\n\nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Vector messages. \n\nParameters\n\ncontext – the gRPC context. \n\nvec1 – the vector to be transmitted. \n\nvec2 – (optional) the second vector to be transmitted. \n\nReturns\n\nstd::vector<std::vector<int>> \n\n\n\nstd::vector<int> set_vector_metadata(::grpc::ClientContext *context, const std::vector<double> &vec, const std::string &vec_name)\n\nSet the Vector-specific message metadata (i.e. how many partial Vector messages constitute an entire Vector). \n\nParameters\n\ncontext – the gRPC context. \n\nvec – the vector to be transmitted. \n\nvec_name – the identifier of the vector. \n\nReturns\n\nstd::vector<int> \n\n\n\nstd::vector<std::vector<int>> define_matstream_metadata(::grpc::ClientContext *context, const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Matrix messages. \n\nParameters\n\ncontext – the gRPC context. \n\nmat1 – the first matrix to be transmitted. \n\nmat2 – the second matrix to be transmitted. \n\nReturns\n\nstd::vector<std::vector<int>> \n\n\n\nstd::vector<int> set_matrix_metadata(::grpc::ClientContext *context, const std::vector<std::vector<double>> &mat, const std::string &mat_name)\n\nSet the Matrix-specific message metadata (i.e. how many partial Matrix messages constitute an entire Matrix). \n\nParameters\n\ncontext – the gRPC context. \n\nmat – the matrix to be transmitted. \n\nmat_name – the identifier of the matrix. \n\nReturns\n\nstd::vector<int> \n\n\n\nstd::vector<double> deserialize_vector(const std::string &bytes, const int length, grpcdemo::DataType type)\n\nMethod used to deserialize a Vector message into an std::vector<double> object. \n\nParameters\n\nbytes – the chunk of bytes from where the vector is deserialized. \n\nlength – the length of the vector we are deserializing. \n\ntype – the type of data inside the vector (e.g. double, int…). \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::string serialize_vector(const std::vector<double> &vector, const int start, const int end)\n\nMethod used to serialize an std::vector<double> object into a Vector message. \n\nParameters\n\nvector – the std::vector<double> to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nstd::vector<std::vector<double>> deserialize_matrix(const std::string &bytes, const int rows, const int cols, grpcdemo::DataType type)\n\nMethod used to deserialize a Matrix message into an std::vector<std::vector<double>> object. \n\nParameters\n\nbytes – the chunk of bytes from where the matrix is deserialized. \n\nrows – the number of rows of the matrix we are deserializing. \n\ncols – the number of columns of the matrix we are deserializing. \n\ntype – the type of data inside the matrix (e.g. double, int…). \n\nReturns\n\nstd::vector<std::vector<double>> \n\n\n\nstd::string serialize_matrix(const std::vector<std::vector<double>> &matrix, const int start, const int end)\n\nMethod used to serialize an std::vector<std::vector<double>> object into a Matrix message. \n\nParameters\n\nmatrix – the std::vector<std::vector<double>> to be serialized. \n\nstart – the starting row index to serialize. \n\nend – the last row index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nvoid send_vector(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Vector, grpcdemo::Vector>> &reader_writer, const std::vector<double> &vector, const std::vector<int> &chunks)\n\nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Vector messages. \n\nParameters\n\nreader_writer – the writer used for streaming the messages. \n\nvector – the message to be streamed. \n\nchunks – number of elements in each individual Vector message. \n\n\n\nvoid send_matrix(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix>> &reader_writer, const std::vector<std::vector<double>> &matrix, const std::vector<int> &chunks)\n\nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Matrix messages. \n\nParameters\n\nreader_writer – the writer used for streaming the messages. \n\nmatrix – the message to be streamed. \n\nchunks – number of elements in each individual Vector message. \n\n\n\nstd::vector<double> receive_vector(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Vector, grpcdemo::Vector>> &reader_writer, ::grpc::ClientContext *context)\n\nMethod in charge of providing the resulting Vector of an operation requested to the server from a stream of partial Vector messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::vector<std::vector<double>> receive_matrix(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix>> &reader_writer, ::grpc::ClientContext *context)\n\nMethod in charge of providing the resulting Matrix of an operation requested to the server from a stream of partial Matrix messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Members\n\n\n\nstd::unique_ptr<grpcdemo::GRPCDemo::Stub> _stub\n\nA unique pointer to the stub which defines the gRPC connection (Channel). \n\n\n\nbool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient10GRPCClientEKNSt6stringEKiKb",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient10GRPCClientEKNSt6stringEKiKb",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient10GRPCClientEKNSt6stringEKiKb",
        "text": "GRPCClient(const std::string host = std::string{\"0.0.0.0\"}, const int port = 50000, const bool debug_log = false)\n\nConstruct a new GRPC Client object. \n\nParameters\n\nhost – the host (DNS/IP) where the server is located. Default: 0.0.0.0. \n\nport – the port through which the server is exposed. Default: 50000. \n\ndebug_log – whether to show the enhanced debugging logs or not. Default: false. "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClientD0Ev",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClientD0Ev",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClientD0Ev",
        "text": "~GRPCClient()\n\nDestroy the GRPC Client object. "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient16request_greetingERKNSt6stringE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16request_greetingERKNSt6stringE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16request_greetingERKNSt6stringE",
        "text": "void request_greeting(const std::string &name)\n\nMethod to request a greeting from the endpoint server. \n\nParameters\n\nname – the name of the entity requesting the greeting (i.e. us). "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient11flip_vectorERKNSt6vectorIdEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11flip_vectorERKNSt6vectorIdEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11flip_vectorERKNSt6vectorIdEE",
        "text": "std::vector<double> flip_vector(const std::vector<double> &vec)\n\nMethod in charge of requesting a vector position flip to the endpoint server. \n\nParameters\n\nvec – the first vector involved in the operation. \n\nReturns\n\nstd::vector<double> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient11add_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11add_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11add_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "text": "std::vector<double> add_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector addition to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\nstd::vector<double> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient16multiply_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16multiply_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16multiply_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "text": "double multiply_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector dot product to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\ndouble "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient12add_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient12add_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient12add_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "text": "std::vector<std::vector<double>> add_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix addition to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient17multiply_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient17multiply_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient17multiply_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "text": "std::vector<std::vector<double>> multiply_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix multiplication to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient25define_vecstream_metadataEPN4grpc13ClientContextERKNSt6vectorIdEERKNSt6vectorIdEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient25define_vecstream_metadataEPN4grpc13ClientContextERKNSt6vectorIdEERKNSt6vectorIdEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient25define_vecstream_metadataEPN4grpc13ClientContextERKNSt6vectorIdEERKNSt6vectorIdEE",
        "text": "std::vector<std::vector<int>> define_vecstream_metadata(::grpc::ClientContext *context, const std::vector<double> &vec1, const std::vector<double> &vec2 = {})\n\nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Vector messages. \n\nParameters\n\ncontext – the gRPC context. \n\nvec1 – the vector to be transmitted. \n\nvec2 – (optional) the second vector to be transmitted. \n\nReturns\n\nstd::vector<std::vector<int>> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient19set_vector_metadataEPN4grpc13ClientContextERKNSt6vectorIdEERKNSt6stringE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient19set_vector_metadataEPN4grpc13ClientContextERKNSt6vectorIdEERKNSt6stringE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient19set_vector_metadataEPN4grpc13ClientContextERKNSt6vectorIdEERKNSt6stringE",
        "text": "std::vector<int> set_vector_metadata(::grpc::ClientContext *context, const std::vector<double> &vec, const std::string &vec_name)\n\nSet the Vector-specific message metadata (i.e. how many partial Vector messages constitute an entire Vector). \n\nParameters\n\ncontext – the gRPC context. \n\nvec – the vector to be transmitted. \n\nvec_name – the identifier of the vector. \n\nReturns\n\nstd::vector<int> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient25define_matstream_metadataEPN4grpc13ClientContextERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient25define_matstream_metadataEPN4grpc13ClientContextERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient25define_matstream_metadataEPN4grpc13ClientContextERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "text": "std::vector<std::vector<int>> define_matstream_metadata(::grpc::ClientContext *context, const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of defining the Client Metadata in the bidirectional stream transfer of Matrix messages. \n\nParameters\n\ncontext – the gRPC context. \n\nmat1 – the first matrix to be transmitted. \n\nmat2 – the second matrix to be transmitted. \n\nReturns\n\nstd::vector<std::vector<int>> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient19set_matrix_metadataEPN4grpc13ClientContextERKNSt6vectorINSt6vectorIdEEEERKNSt6stringE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient19set_matrix_metadataEPN4grpc13ClientContextERKNSt6vectorINSt6vectorIdEEEERKNSt6stringE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient19set_matrix_metadataEPN4grpc13ClientContextERKNSt6vectorINSt6vectorIdEEEERKNSt6stringE",
        "text": "std::vector<int> set_matrix_metadata(::grpc::ClientContext *context, const std::vector<std::vector<double>> &mat, const std::string &mat_name)\n\nSet the Matrix-specific message metadata (i.e. how many partial Matrix messages constitute an entire Matrix). \n\nParameters\n\ncontext – the gRPC context. \n\nmat – the matrix to be transmitted. \n\nmat_name – the identifier of the matrix. \n\nReturns\n\nstd::vector<int> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient18deserialize_vectorERKNSt6stringEKiN8grpcdemo8DataTypeE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient18deserialize_vectorERKNSt6stringEKiN8grpcdemo8DataTypeE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient18deserialize_vectorERKNSt6stringEKiN8grpcdemo8DataTypeE",
        "text": "std::vector<double> deserialize_vector(const std::string &bytes, const int length, grpcdemo::DataType type)\n\nMethod used to deserialize a Vector message into an std::vector<double> object. \n\nParameters\n\nbytes – the chunk of bytes from where the vector is deserialized. \n\nlength – the length of the vector we are deserializing. \n\ntype – the type of data inside the vector (e.g. double, int…). \n\nReturns\n\nstd::vector<double> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient16serialize_vectorERKNSt6vectorIdEEKiKi",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16serialize_vectorERKNSt6vectorIdEEKiKi",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16serialize_vectorERKNSt6vectorIdEEKiKi",
        "text": "std::string serialize_vector(const std::vector<double> &vector, const int start, const int end)\n\nMethod used to serialize an std::vector<double> object into a Vector message. \n\nParameters\n\nvector – the std::vector<double> to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient18deserialize_matrixERKNSt6stringEKiKiN8grpcdemo8DataTypeE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient18deserialize_matrixERKNSt6stringEKiKiN8grpcdemo8DataTypeE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient18deserialize_matrixERKNSt6stringEKiKiN8grpcdemo8DataTypeE",
        "text": "std::vector<std::vector<double>> deserialize_matrix(const std::string &bytes, const int rows, const int cols, grpcdemo::DataType type)\n\nMethod used to deserialize a Matrix message into an std::vector<std::vector<double>> object. \n\nParameters\n\nbytes – the chunk of bytes from where the matrix is deserialized. \n\nrows – the number of rows of the matrix we are deserializing. \n\ncols – the number of columns of the matrix we are deserializing. \n\ntype – the type of data inside the matrix (e.g. double, int…). \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient16serialize_matrixERKNSt6vectorINSt6vectorIdEEEEKiKi",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16serialize_matrixERKNSt6vectorINSt6vectorIdEEEEKiKi",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient16serialize_matrixERKNSt6vectorINSt6vectorIdEEEEKiKi",
        "text": "std::string serialize_matrix(const std::vector<std::vector<double>> &matrix, const int start, const int end)\n\nMethod used to serialize an std::vector<std::vector<double>> object into a Matrix message. \n\nParameters\n\nmatrix – the std::vector<std::vector<double>> to be serialized. \n\nstart – the starting row index to serialize. \n\nend – the last row index to serialize (not included). \n\nReturns\n\nstd::string "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient11send_vectorERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEEERKNSt6vectorIdEERKNSt6vectorIiEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11send_vectorERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEEERKNSt6vectorIdEERKNSt6vectorIiEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11send_vectorERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEEERKNSt6vectorIdEERKNSt6vectorIiEE",
        "text": "void send_vector(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Vector, grpcdemo::Vector>> &reader_writer, const std::vector<double> &vector, const std::vector<int> &chunks)\n\nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Vector messages. \n\nParameters\n\nreader_writer – the writer used for streaming the messages. \n\nvector – the message to be streamed. \n\nchunks – number of elements in each individual Vector message. "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient11send_matrixERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEEERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorIiEE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11send_matrixERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEEERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorIiEE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient11send_matrixERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEEERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorIiEE",
        "text": "void send_matrix(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix>> &reader_writer, const std::vector<std::vector<double>> &matrix, const std::vector<int> &chunks)\n\nMethod in charge of sending a message for stream-based inputs in RPC method. Targeted to Matrix messages. \n\nParameters\n\nreader_writer – the writer used for streaming the messages. \n\nmatrix – the message to be streamed. \n\nchunks – number of elements in each individual Vector message. "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient14receive_vectorERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEEEPN4grpc13ClientContextE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient14receive_vectorERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEEEPN4grpc13ClientContextE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient14receive_vectorERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEEEPN4grpc13ClientContextE",
        "text": "std::vector<double> receive_vector(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Vector, grpcdemo::Vector>> &reader_writer, ::grpc::ClientContext *context)\n\nMethod in charge of providing the resulting Vector of an operation requested to the server from a stream of partial Vector messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<double> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient14receive_matrixERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEEEPN4grpc13ClientContextE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient14receive_matrixERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEEEPN4grpc13ClientContextE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient14receive_matrixERNSt10unique_ptrIN4grpc18ClientReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEEEPN4grpc13ClientContextE",
        "text": "std::vector<std::vector<double>> receive_matrix(std::unique_ptr<::grpc::ClientReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix>> &reader_writer, ::grpc::ClientContext *context)\n\nMethod in charge of providing the resulting Matrix of an operation requested to the server from a stream of partial Matrix messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient5_stubE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient5_stubE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient5_stubE",
        "text": "std::unique_ptr<grpcdemo::GRPCDemo::Stub> _stub\n\nA unique pointer to the stub which defines the gRPC connection (Channel). "
    },
    {
        "objectID": "api/cpp-grpc/client",
        "href": "api/cpp-grpc/client.html#_CPPv4N5ansys4grpc6client10GRPCClient10_debug_logE",
        "title": "C++ gRPC client module > C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient10_debug_logE",
        "section": "C++ gRPC client module > _CPPv4N5ansys4grpc6client10GRPCClient10_debug_logE",
        "text": "bool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#python-grpc-client-module",
        "title": "Python gRPC client module",
        "section": "Python gRPC client module",
        "text": "Python implementation of the gRPC API Eigen Example client.\nBases: object\nProvides the API Eigen Example client class for interacting via gRPC.\nAdd numpy.ndarray matrices using the Eigen library on the server side.\nResulting numpy.ndarray of the matrices addition.\nAdd numpy.ndarray vectors using the Eigen library on the server side.\nResult of the given numpy.ndarrays.\nFlip the position of a numpy.ndarray vector such that [A, B, C, D] –> [D, C, B, A].\nVector to flip.\nFlipped vector.\nMultiply numpy.ndarray matrices using the Eigen library on the server side.\nResulting numpy.ndarray of the matrices’ multiplication.\nMultiply numpy.ndarray vectors using the Eigen library on the server side.\nResult of the multiplication of numpy.ndarray vectors. Despite returning a numpy.ndarray, the result only contains one value because it is a dot product.\nMethod that requests a greeting from the server.\nName of the “client”. For example, “Michael”.\nPython gRPC client module\nobject\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\npython:str"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient",
        "title": "Python gRPC client module > Python gRPC client module > DemoGRPCClient",
        "section": "Python gRPC client module > DemoGRPCClient",
        "text": "class ansys.eigen.python.grpc.client.DemoGRPCClient(ip='127.0.0.1', port=50051, timeout=1, test=None)\n\nBases: object\n\nProvides the API Eigen Example client class for interacting via gRPC.\n\n!! processed by numpydoc !!\n\n\n\nadd_matrices(*args)\n\nAdd numpy.ndarray matrices using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResulting numpy.ndarray of the matrices addition.\n\n!! processed by numpydoc !!\n\n\n\nadd_vectors(*args)\n\nAdd numpy.ndarray vectors using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResult of the given numpy.ndarrays.\n\n!! processed by numpydoc !!\n\n\n\nflip_vector(vector)\n\nFlip the position of a numpy.ndarray vector such that [A, B, C, D] –> [D, C, B, A].\n\nParameters\n\nvector\n\nnumpy.ndarray\n\nVector to flip.\n\nReturns\n\nnumpy.ndarray\n\nFlipped vector.\n\n!! processed by numpydoc !!\n\n\n\nmultiply_matrices(*args)\n\nMultiply numpy.ndarray matrices using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResulting numpy.ndarray of the matrices’ multiplication.\n\n!! processed by numpydoc !!\n\n\n\nmultiply_vectors(*args)\n\nMultiply numpy.ndarray vectors using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResult of the multiplication of numpy.ndarray vectors. Despite returning a numpy.ndarray, the result only contains one value because it is a dot product.\n\n!! processed by numpydoc !!\n\n\n\nrequest_greeting(name)\n\nMethod that requests a greeting from the server.\n\nParameters\n\nname\n\npython:str\n\nName of the “client”. For example, “Michael”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient.add_matrices",
        "title": "Python gRPC client module > Python gRPC client module > add_matrices",
        "section": "Python gRPC client module > add_matrices",
        "text": "add_matrices(*args)\n\nAdd numpy.ndarray matrices using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResulting numpy.ndarray of the matrices addition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient.add_vectors",
        "title": "Python gRPC client module > Python gRPC client module > add_vectors",
        "section": "Python gRPC client module > add_vectors",
        "text": "add_vectors(*args)\n\nAdd numpy.ndarray vectors using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResult of the given numpy.ndarrays.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient.flip_vector",
        "title": "Python gRPC client module > Python gRPC client module > flip_vector",
        "section": "Python gRPC client module > flip_vector",
        "text": "flip_vector(vector)\n\nFlip the position of a numpy.ndarray vector such that [A, B, C, D] –> [D, C, B, A].\n\nParameters\n\nvector\n\nnumpy.ndarray\n\nVector to flip.\n\nReturns\n\nnumpy.ndarray\n\nFlipped vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient.multiply_matrices",
        "title": "Python gRPC client module > Python gRPC client module > multiply_matrices",
        "section": "Python gRPC client module > multiply_matrices",
        "text": "multiply_matrices(*args)\n\nMultiply numpy.ndarray matrices using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResulting numpy.ndarray of the matrices’ multiplication.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient.multiply_vectors",
        "title": "Python gRPC client module > Python gRPC client module > multiply_vectors",
        "section": "Python gRPC client module > multiply_vectors",
        "text": "multiply_vectors(*args)\n\nMultiply numpy.ndarray vectors using the Eigen library on the server side.\n\nReturns\n\nnumpy.ndarray\n\nResult of the multiplication of numpy.ndarray vectors. Despite returning a numpy.ndarray, the result only contains one value because it is a dot product.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/client",
        "href": "api/python-grpc/client.html#ansys.eigen.python.grpc.client.DemoGRPCClient.request_greeting",
        "title": "Python gRPC client module > Python gRPC client module > request_greeting",
        "section": "Python gRPC client module > request_greeting",
        "text": "request_greeting(name)\n\nMethod that requests a greeting from the server.\n\nParameters\n\nname\n\npython:str\n\nName of the “client”. For example, “Michael”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#python-grpc-server-module",
        "title": "Python gRPC server module",
        "section": "Python gRPC server module",
        "text": "Python implementation of the gRPC API Eigen example server.\nBases: GRPCDemoServicer\nProvides methods that implement functionality of the API Eigen Example server.\nAdd matrices.\nIterator to the stream of matrix messages provided.\ngRPC-specific information.\nMatrix message.\nAdd vectors.\nIterator to the stream of vector messages provided.\ngRPC-specific information.\nVector message.\nFlip a given vector.\nIterator to the stream of vector messages provided.\ngRPC-specific information.\nFlipped vector message.\nMultiply two matrices.\nIterator to the stream of Matrix messages provided.\ngRPC-specific information.\nMatrix message.\nMultiply two vectors.\nIterator to the stream of vector messages provided.\ngRPC-specific information.\nVector message.\nTest the greeter method to see if the server is up and running correctly.\nGreeting request sent by the client.\ngRPC-specific information.\nReply to greeting by the server.\nCheck if the new data type is the same as the previous data type.\nType of the numpy array before processing.\nType of the numpy array to be processed.\nType of the numpy array.\nIn case there is already a type and it does not match that of the new_type argument.\nCheck if the new parsed size is the same as the previous size.\nSize of the numpy array before processing.\nSize of the numpy array to process.\nSize of the numpy array.\nIn case there is already a size and it does not match that of the new_size argument.\nDeploy the API Eigen Example server.\nPython gRPC server module\nGRPCDemoServicer\niterator\ngrpc.ServicerContext\ngrpcdemo_pb2.Matrix\niterator\ngrpc.ServicerContext\ngrpcdemo_pb2.Vector\niterator\ngrpc.ServicerContext\ngrpcdemo_pb2.Vector\niterator\ngrpc.ServicerContext\ngrpcdemo_pb2.Matrix\niterator\ngrpc.ServicerContext\ngrpcdemo_pb2.Vector\nHelloRequest\ngrpc.ServicerContext\ngrpcdemo_pb2.HelloReply\nnumpy.type\nnumpy.type\nnumpy.type\nRuntimeError\npython:tuple\n_type_\npython:tuple\nRuntimeError"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer",
        "title": "Python gRPC server module > Python gRPC server module > GRPCDemoServicer",
        "section": "Python gRPC server module > GRPCDemoServicer",
        "text": "class ansys.eigen.python.grpc.server.GRPCDemoServicer\n\nBases: GRPCDemoServicer\n\nProvides methods that implement functionality of the API Eigen Example server.\n\n!! processed by numpydoc !!\n\n\n\nAddMatrices(request_iterator, context)\n\nAdd matrices.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of matrix messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Matrix\n\nMatrix message.\n\n!! processed by numpydoc !!\n\n\n\nAddVectors(request_iterator, context)\n\nAdd vectors.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of vector messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Vector\n\nVector message.\n\n!! processed by numpydoc !!\n\n\n\nFlipVector(request_iterator, context)\n\nFlip a given vector.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of vector messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Vector\n\nFlipped vector message.\n\n!! processed by numpydoc !!\n\n\n\nMultiplyMatrices(request_iterator, context)\n\nMultiply two matrices.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of Matrix messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Matrix\n\nMatrix message.\n\n!! processed by numpydoc !!\n\n\n\nMultiplyVectors(request_iterator, context)\n\nMultiply two vectors.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of vector messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Vector\n\nVector message.\n\n!! processed by numpydoc !!\n\n\n\nSayHello(request, context)\n\nTest the greeter method to see if the server is up and running correctly.\n\nParameters\n\nrequest\n\nHelloRequest\n\nGreeting request sent by the client.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.HelloReply\n\nReply to greeting by the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer.AddMatrices",
        "title": "Python gRPC server module > Python gRPC server module > AddMatrices",
        "section": "Python gRPC server module > AddMatrices",
        "text": "AddMatrices(request_iterator, context)\n\nAdd matrices.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of matrix messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Matrix\n\nMatrix message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer.AddVectors",
        "title": "Python gRPC server module > Python gRPC server module > AddVectors",
        "section": "Python gRPC server module > AddVectors",
        "text": "AddVectors(request_iterator, context)\n\nAdd vectors.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of vector messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Vector\n\nVector message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer.FlipVector",
        "title": "Python gRPC server module > Python gRPC server module > FlipVector",
        "section": "Python gRPC server module > FlipVector",
        "text": "FlipVector(request_iterator, context)\n\nFlip a given vector.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of vector messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Vector\n\nFlipped vector message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer.MultiplyMatrices",
        "title": "Python gRPC server module > Python gRPC server module > MultiplyMatrices",
        "section": "Python gRPC server module > MultiplyMatrices",
        "text": "MultiplyMatrices(request_iterator, context)\n\nMultiply two matrices.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of Matrix messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Matrix\n\nMatrix message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer.MultiplyVectors",
        "title": "Python gRPC server module > Python gRPC server module > MultiplyVectors",
        "section": "Python gRPC server module > MultiplyVectors",
        "text": "MultiplyVectors(request_iterator, context)\n\nMultiply two vectors.\n\nParameters\n\nrequest_iterator\n\niterator\n\nIterator to the stream of vector messages provided.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.Vector\n\nVector message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.GRPCDemoServicer.SayHello",
        "title": "Python gRPC server module > Python gRPC server module > SayHello",
        "section": "Python gRPC server module > SayHello",
        "text": "SayHello(request, context)\n\nTest the greeter method to see if the server is up and running correctly.\n\nParameters\n\nrequest\n\nHelloRequest\n\nGreeting request sent by the client.\n\ncontext\n\ngrpc.ServicerContext\n\ngRPC-specific information.\n\nReturns\n\ngrpcdemo_pb2.HelloReply\n\nReply to greeting by the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.check_data_type",
        "title": "Python gRPC server module > Python gRPC server module > check_data_type",
        "section": "Python gRPC server module > check_data_type",
        "text": "ansys.eigen.python.grpc.server.check_data_type(dtype, new_dtype)\n\nCheck if the new data type is the same as the previous data type.\n\nParameters\n\ndtype\n\nnumpy.type\n\nType of the numpy array before processing.\n\nnew_dtype\n\nnumpy.type\n\nType of the numpy array to be processed.\n\nReturns\n\nnumpy.type\n\nType of the numpy array.\n\nRaises\n\nRuntimeError\n\nIn case there is already a type and it does not match that of the new_type argument.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.check_size",
        "title": "Python gRPC server module > Python gRPC server module > check_size",
        "section": "Python gRPC server module > check_size",
        "text": "ansys.eigen.python.grpc.server.check_size(size, new_size)\n\nCheck if the new parsed size is the same as the previous size.\n\nParameters\n\nsize\n\npython:tuple\n\nSize of the numpy array before processing.\n\nnew_size\n\n_type_\n\nSize of the numpy array to process.\n\nReturns\n\npython:tuple\n\nSize of the numpy array.\n\nRaises\n\nRuntimeError\n\nIn case there is already a size and it does not match that of the new_size argument.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-grpc/server",
        "href": "api/python-grpc/server.html#ansys.eigen.python.grpc.server.serve",
        "title": "Python gRPC server module > Python gRPC server module > serve",
        "section": "Python gRPC server module > serve",
        "text": "ansys.eigen.python.grpc.server.serve()\n\nDeploy the API Eigen Example server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-rest/server",
        "href": "api/python-rest/server.html#python-rest-server-module",
        "title": "Python REST server module",
        "section": "Python REST server module",
        "text": "Python implementation of the REST API Eigen example server.\nInitialize the REST API server.\nInstance of the application.\nIn case no JSON-format request body was provided.\nIn case no ‘value’ is provided within the request body.\nIn case the given argument is not a string.\nIn case the given type is not in the ALLOWED_TYPES tuple.\nPython REST server module\nFlask\nInvalidUsage\nInvalidUsage\nInvalidUsage\nInvalidUsage"
    },
    {
        "objectID": "api/python-rest/server",
        "href": "api/python-rest/server.html#ansys.eigen.python.rest.server.create_app",
        "title": "Python REST server module > Python REST server module > create_app",
        "section": "Python REST server module > create_app",
        "text": "ansys.eigen.python.rest.server.create_app()\n\nInitialize the REST API server.\n\nReturns\n\nFlask\n\nInstance of the application.\n\nRaises\n\nInvalidUsage\n\nIn case no JSON-format request body was provided.\n\nInvalidUsage\n\nIn case no ‘value’ is provided within the request body.\n\nInvalidUsage\n\nIn case the given argument is not a string.\n\nInvalidUsage\n\nIn case the given type is not in the ALLOWED_TYPES tuple.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "examples/00-rest-examples/sg_execution_times",
        "href": "examples/00-rest-examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.076 total execution time for 1 file from examples/00-rest-examples:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-rest-examples_python_rest_demo.py (python_rest_demo.py)\n00:00.076\n0.0\nComputation times\npython_rest_demo.py"
    },
    {
        "objectID": "examples/01-grpc-examples/sg_execution_times",
        "href": "examples/01-grpc-examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.022 total execution time for 1 file from examples/01-grpc-examples:\nExample\nTime\nMem (MB)\nsphx_glr_examples_01-grpc-examples_python_grpc_demo.py (python_grpc_demo.py)\n00:00.022\n0.0\nComputation times\npython_grpc_demo.py"
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#c-rest-eigen-binder-module",
        "title": "C++ REST Eigen-binder module",
        "section": "C++ REST Eigen-binder module",
        "text": "Namespace exposing functionalities of interest from the Eigen library for the API Eigen Example project. \nWrapper method to Matrix multiplication carried out by Eigen operators. \na – The first matrix. \nb – The second matrix.\nEigen::MatrixXd \nWrapper method to Matrix addition carried out by Eigen operators. \na – The first matrix. \nb – The second matrix.\nEigen::MatrixXd \nWrapper method to Vector multiplication (dot product) carried out by Eigen operators. \nv – The first vector. \nw – The second vector.\ndouble \nWrapper method to Vector addition carried out by Eigen operators. \nv – The first vector. \nw – The second vector.\nEigen::VectorXd \nMethod in charge of parsing the JSON list to a vector. \ninput – the JSON list. \nEigen::VectorXd \nMethod in charge of parsing the JSON list of lists to a matrix. \ninput – the JSON list of lists. \nEigen::MatrixXd \nMethod in charge of writing a JSON list from the Eigen::VectorXd object given. \ninput – the Eigen::VectorXd. \nstd::string - representing the Vector as a JSON list. \nMethod in charge of writing a JSON list from the Eigen::MatrixXd object given. \ninput – the Eigen::MatrixXd. \nstd::string - representing the Matrix as a JSON list. \nC++ REST Eigen-binder module"
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigenE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigenE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigenE",
        "text": "namespace eigen\n\nNamespace exposing functionalities of interest from the Eigen library for the API Eigen Example project. \n\nFunctions\n\n\n\nEigen::MatrixXd multiply_matrices(const Eigen::MatrixXd &a, const Eigen::MatrixXd &b)\n\nWrapper method to Matrix multiplication carried out by Eigen operators. \n\nParameters\n\na – The first matrix. \n\nb – The second matrix.\n\nReturns\n\nEigen::MatrixXd \n\n\n\nEigen::MatrixXd add_matrices(const Eigen::MatrixXd &a, const Eigen::MatrixXd &b)\n\nWrapper method to Matrix addition carried out by Eigen operators. \n\nParameters\n\na – The first matrix. \n\nb – The second matrix.\n\nReturns\n\nEigen::MatrixXd \n\n\n\ndouble multiply_vectors(const Eigen::VectorXd &v, const Eigen::VectorXd &w)\n\nWrapper method to Vector multiplication (dot product) carried out by Eigen operators. \n\nParameters\n\nv – The first vector. \n\nw – The second vector.\n\nReturns\n\ndouble \n\n\n\nEigen::VectorXd add_vectors(const Eigen::VectorXd &v, const Eigen::VectorXd &w)\n\nWrapper method to Vector addition carried out by Eigen operators. \n\nParameters\n\nv – The first vector. \n\nw – The second vector.\n\nReturns\n\nEigen::VectorXd \n\n\n\nEigen::VectorXd read_vector(const std::string &input)\n\nMethod in charge of parsing the JSON list to a vector. \n\nParameters\n\ninput – the JSON list. \n\nReturns\n\nEigen::VectorXd \n\n\n\nEigen::MatrixXd read_matrix(const std::string &input)\n\nMethod in charge of parsing the JSON list of lists to a matrix. \n\nParameters\n\ninput – the JSON list of lists. \n\nReturns\n\nEigen::MatrixXd \n\n\n\nstd::string write_vector(const Eigen::VectorXd &input)\n\nMethod in charge of writing a JSON list from the Eigen::VectorXd object given. \n\nParameters\n\ninput – the Eigen::VectorXd. \n\nReturns\n\nstd::string - representing the Vector as a JSON list. \n\n\n\nstd::string write_matrix(const Eigen::MatrixXd &input)\n\nMethod in charge of writing a JSON list from the Eigen::MatrixXd object given. \n\nParameters\n\ninput – the Eigen::MatrixXd. \n\nReturns\n\nstd::string - representing the Matrix as a JSON list. "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen17multiply_matricesERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen17multiply_matricesERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen17multiply_matricesERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdE",
        "text": "Eigen::MatrixXd multiply_matrices(const Eigen::MatrixXd &a, const Eigen::MatrixXd &b)\n\nWrapper method to Matrix multiplication carried out by Eigen operators. \n\nParameters\n\na – The first matrix. \n\nb – The second matrix.\n\nReturns\n\nEigen::MatrixXd "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen12add_matricesERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen12add_matricesERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen12add_matricesERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdE",
        "text": "Eigen::MatrixXd add_matrices(const Eigen::MatrixXd &a, const Eigen::MatrixXd &b)\n\nWrapper method to Matrix addition carried out by Eigen operators. \n\nParameters\n\na – The first matrix. \n\nb – The second matrix.\n\nReturns\n\nEigen::MatrixXd "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen16multiply_vectorsERKN5Eigen8VectorXdERKN5Eigen8VectorXdE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen16multiply_vectorsERKN5Eigen8VectorXdERKN5Eigen8VectorXdE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen16multiply_vectorsERKN5Eigen8VectorXdERKN5Eigen8VectorXdE",
        "text": "double multiply_vectors(const Eigen::VectorXd &v, const Eigen::VectorXd &w)\n\nWrapper method to Vector multiplication (dot product) carried out by Eigen operators. \n\nParameters\n\nv – The first vector. \n\nw – The second vector.\n\nReturns\n\ndouble "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen11add_vectorsERKN5Eigen8VectorXdERKN5Eigen8VectorXdE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen11add_vectorsERKN5Eigen8VectorXdERKN5Eigen8VectorXdE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen11add_vectorsERKN5Eigen8VectorXdERKN5Eigen8VectorXdE",
        "text": "Eigen::VectorXd add_vectors(const Eigen::VectorXd &v, const Eigen::VectorXd &w)\n\nWrapper method to Vector addition carried out by Eigen operators. \n\nParameters\n\nv – The first vector. \n\nw – The second vector.\n\nReturns\n\nEigen::VectorXd "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen11read_vectorERKNSt6stringE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen11read_vectorERKNSt6stringE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen11read_vectorERKNSt6stringE",
        "text": "Eigen::VectorXd read_vector(const std::string &input)\n\nMethod in charge of parsing the JSON list to a vector. \n\nParameters\n\ninput – the JSON list. \n\nReturns\n\nEigen::VectorXd "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen11read_matrixERKNSt6stringE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen11read_matrixERKNSt6stringE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen11read_matrixERKNSt6stringE",
        "text": "Eigen::MatrixXd read_matrix(const std::string &input)\n\nMethod in charge of parsing the JSON list of lists to a matrix. \n\nParameters\n\ninput – the JSON list of lists. \n\nReturns\n\nEigen::MatrixXd "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen12write_vectorERKN5Eigen8VectorXdE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen12write_vectorERKN5Eigen8VectorXdE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen12write_vectorERKN5Eigen8VectorXdE",
        "text": "std::string write_vector(const Eigen::VectorXd &input)\n\nMethod in charge of writing a JSON list from the Eigen::VectorXd object given. \n\nParameters\n\ninput – the Eigen::VectorXd. \n\nReturns\n\nstd::string - representing the Vector as a JSON list. "
    },
    {
        "objectID": "api/cpp-rest/eigen",
        "href": "api/cpp-rest/eigen.html#_CPPv4N5ansys5eigen12write_matrixERKN5Eigen8MatrixXdE",
        "title": "C++ REST Eigen-binder module > C++ REST Eigen-binder module > _CPPv4N5ansys5eigen12write_matrixERKN5Eigen8MatrixXdE",
        "section": "C++ REST Eigen-binder module > _CPPv4N5ansys5eigen12write_matrixERKN5Eigen8MatrixXdE",
        "text": "std::string write_matrix(const Eigen::MatrixXd &input)\n\nMethod in charge of writing a JSON list from the Eigen::MatrixXd object given. \n\nParameters\n\ninput – the Eigen::MatrixXd. \n\nReturns\n\nstd::string - representing the Matrix as a JSON list. "
    },
    {
        "objectID": "examples/01-grpc-examples/python_grpc_demo",
        "href": "examples/01-grpc-examples/python_grpc_demo.html#api-eigen-example---grpc-demo-using-python",
        "title": "API Eigen Example - gRPC Demo using Python",
        "section": "API Eigen Example - gRPC Demo using Python",
        "text": "This tutorial shows how you can use the Python gRPC Client of the API Eigen Example\nproject to communicate with the gRPC Server.\nIn the following demo, we will be showing the basics of API gRPC protocol by means of a\nsimple library we have created. This library basically contains two elements in its Python version:\nit, in our case the Eigen library. This API gRPC interface basically exposes certain functionalities such as\nadding, subtracting and multiplying Eigen::VectorXd and Eigen::MatrixXd in a simple way. By using Protobuf,\nwe have created certain messages which both the server and the client know how to encode and decode.\nA client in charge of easing the interaction with the server by means of API gRPC interface specific methods.\nIn order to run this demo, it is necessary to deploy a server. When the docs are generated\n(via workflows), the server is deployed as a service to compile the example. However, if you\nare planning on running the example on your own, it is necessary to deploy it manually. In order to\ndo so, please run this on a different Python terminal:\nNow, once the server is up and running. Let us import our client!\nAPI Eigen Example - gRPC Demo using Python\nEigen::VectorXd\nEigen::MatrixXd"
    },
    {
        "objectID": "examples/01-grpc-examples/python_grpc_demo",
        "href": "examples/01-grpc-examples/python_grpc_demo.html#the-demogrpcclient",
        "title": "API Eigen Example - gRPC Demo using Python > The DemoGRPCClient",
        "section": "The DemoGRPCClient",
        "text": "This DemoGRPCClient class is basically the one which will handle the API gRPC interface with the server,\ntogether with the connection itself, the formatting of the request and so on. When constructing the class we\nmust provide as inputs the ip and the port of the server. For this demo we are running, since we\nalready deployed the server (either manually or as a container), we will provide the following arguments:\nIP(or DNS): 127.0.0.1\nPort: 50051\nThe server is exposed by IP 127.0.0.1 and port 50051 as per defined in the Dockerfile of the server and\nthe server itself. Thus, the previous inputs should be provided, although they are also the default values. Nonetheless,\nin the IP field we could also provide the DNS for the sake of showing that DNS values are also accepted. In this case,\nby inserting localhost the connection would also be established.\nThis DemoGRPCClient also has a method for verifying the connection to out client, which is a simple\nhandshake/greeting, when we provide our name:\nThis will let us verify that the connection to the server is adequate and communication is favorable.\nThe DemoGRPCClient\nDemoGRPCClient\nip\nport\nlocalhost\nDemoGRPCClient"
    },
    {
        "objectID": "examples/01-grpc-examples/python_grpc_demo",
        "href": "examples/01-grpc-examples/python_grpc_demo.html#performing-grpc-interaction",
        "title": "API Eigen Example - gRPC Demo using Python > Performing gRPC interaction",
        "section": "Performing gRPC interaction",
        "text": "Now, we will call the client method add_vectors(...), and we will explain the typical process of all interface methods (add_XXXX(...) and multiply_XXXX(...)):\nThe client performs some sanity checks to confirm that the inputs provided are as expected. This Demo has some limitations such as: only 1D, 2D numpy.ndarrays are allowed; they must be of type float64. Direct interaction with the server (i.e. without a client) and using gRPC is out of the scope of this demo. Doing so could be considered as “impossible” since you would have to serialize your message on your own, following the standard defined in the proto files.\nFor example our Vector message is characterized for having the following structure:\nenum DataType {INTEGER = 0;DOUBLE = 1;}\nmessage Vector {DataType data_type = 1; int32 vector_size = 2; bytes vector_as_chunk = 3;}\nWhen the server receives the messages, it deserializes them and interprets each of the previous fields. Thus, it is easily converted into a numpy.ndarray of the adequate type. Then, the desired vectors to be added are passed to the Eigen library via our demo_eigen_wrapper for the resolution of the demanded operation.\nFor example, according to the proto file, our server receives a stream of Vector messages, and returns a single Vector message (which contains the result of the requested operation):\nrpc AddVectors(stream Vector) returns (Vector) {}\nThe client then receives the response, deserializes the message and returns the corresponding result to the end-user as numpy.ndarray. Thus, the entire process is like a black-box for the end-user, and does not require to understand what is happening behind the scenes, since the end-user is only interested in the end-result.\nLet us now call the method!\nAs mentioned before, there are several other methods implemented:\nLet us show as well operations with 2D numpy.ndarrays (i.e. Matrices)\nTotal running time of the script: (0 minutes 0.022 seconds)\nDownload Jupyter notebook: python_grpc_demo.ipynb\nDownload Python source code: python_grpc_demo.py\nDownload zipped: python_grpc_demo.zip\nGallery generated by Sphinx-Gallery\nPerforming gRPC interaction\nadd_vectors(...)\nadd_XXXX(...)\nmultiply_XXXX(...)\nstreams\nVector\nenum DataType {INTEGER = 0;DOUBLE = 1;}\nmessage Vector {DataType data_type = 1; int32 vector_size = 2; bytes vector_as_chunk = 3;}\ndemo_eigen_wrapper\nrpc AddVectors(stream Vector) returns (Vector) {}\nDownload Jupyter notebook: python_grpc_demo.ipynb\nDownload Python source code: python_grpc_demo.py\nDownload zipped: python_grpc_demo.zip"
    },
    {
        "objectID": "api/python-grpc/index",
        "href": "api/python-grpc/index.html#python-grpc-subpackage",
        "title": "Python gRPC subpackage",
        "section": "Python gRPC subpackage",
        "text": "The Python gRPC subpackage contains the needed elements for client-server interaction using gRPC.\nPython gRPC subpackage"
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#c-rest-server-module",
        "title": "C++ REST server module",
        "section": "C++ REST server module",
        "text": "Namespace including the API Eigen Example Server implemented in C++. \nClass containing the server logic. \nConstruct a new Rest Server object. \nDestroy the Rest Server object. \nMethod for serving our application. \nport – the port in which we want to server our app. Default: 18080. \nasync – whether we want to run application asynchronously or not. Default: false. \nlogLevel – the logging level of our server. Default: Info. \nGet the app object. \ncrow::SimpleApp& \nMethod defining the “Vectors” Resource endpoints. \nMethod defining the “Matrices” Resource endpoints. \nMethod defining the “Vectors” operations endpoints. \nMethod defining the “Matrices” operations endpoints. \nMethod in charge of retrieving the Vector resources from the DB and adding them. \nid1 – - the id of the first Vector. \nid2 – - the id of the second Vector. \ncrow::response \nMethod in charge of retrieving the Vector resources from the DB and performing their dot product. \nid1 – - the id of the first Vector. \nid2 – - the id of the second Vector. \ncrow::response \nMethod in charge of retrieving the Matrix resources from the DB and adding them. \nid1 – - the id of the first Matrix. \nid2 – - the id of the second Matrix. \ncrow::response \nMethod in charge of retrieving the Matrix resources from the DB and multiplying them. \nid1 – - the id of the first Matrix. \nid2 – - the id of the second Matrix. \ncrow::response \nThe server’s DB. \nThe server CROW application. \nC++ REST server module"
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6serverE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6serverE",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6serverE",
        "text": "namespace server\n\nNamespace including the API Eigen Example Server implemented in C++. \n\n\n\nclass RestServer\n\nClass containing the server logic. \n\nPublic Functions\n\n\n\nRestServer()\n\nConstruct a new Rest Server object. \n\n\n\n~RestServer()\n\nDestroy the Rest Server object. \n\n\n\nvoid serve(const int port = 18080, const bool async = false, const crow::LogLevel logLevel = crow::LogLevel::Info)\n\nMethod for serving our application. \n\nParameters\n\nport – the port in which we want to server our app. Default: 18080. \n\nasync – whether we want to run application asynchronously or not. Default: false. \n\nlogLevel – the logging level of our server. Default: Info. \n\n\n\ninline crow::SimpleApp &get_app()\n\nGet the app object. \n\nReturns\n\ncrow::SimpleApp& \n\nPrivate Functions\n\n\n\nvoid vector_resource_endpoints()\n\nMethod defining the “Vectors” Resource endpoints. \n\n\n\nvoid matrix_resource_endpoints()\n\nMethod defining the “Matrices” Resource endpoints. \n\n\n\nvoid vector_operations_endpoints()\n\nMethod defining the “Vectors” operations endpoints. \n\n\n\nvoid matrix_operations_endpoints()\n\nMethod defining the “Matrices” operations endpoints. \n\n\n\ncrow::response add_vectors(int id1, int id2)\n\nMethod in charge of retrieving the Vector resources from the DB and adding them. \n\nParameters\n\nid1 – - the id of the first Vector. \n\nid2 – - the id of the second Vector. \n\nReturns\n\ncrow::response \n\n\n\ncrow::response multiply_vectors(int id1, int id2)\n\nMethod in charge of retrieving the Vector resources from the DB and performing their dot product. \n\nParameters\n\nid1 – - the id of the first Vector. \n\nid2 – - the id of the second Vector. \n\nReturns\n\ncrow::response \n\n\n\ncrow::response add_matrices(int id1, int id2)\n\nMethod in charge of retrieving the Matrix resources from the DB and adding them. \n\nParameters\n\nid1 – - the id of the first Matrix. \n\nid2 – - the id of the second Matrix. \n\nReturns\n\ncrow::response \n\n\n\ncrow::response multiply_matrices(int id1, int id2)\n\nMethod in charge of retrieving the Matrix resources from the DB and multiplying them. \n\nParameters\n\nid1 – - the id of the first Matrix. \n\nid2 – - the id of the second Matrix. \n\nReturns\n\ncrow::response \n\nPrivate Members\n\n\n\ndb::RestDb _db\n\nThe server’s DB. \n\n\n\ncrow::SimpleApp _app\n\nThe server CROW application. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServerE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServerE",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServerE",
        "text": "class RestServer\n\nClass containing the server logic. \n\nPublic Functions\n\n\n\nRestServer()\n\nConstruct a new Rest Server object. \n\n\n\n~RestServer()\n\nDestroy the Rest Server object. \n\n\n\nvoid serve(const int port = 18080, const bool async = false, const crow::LogLevel logLevel = crow::LogLevel::Info)\n\nMethod for serving our application. \n\nParameters\n\nport – the port in which we want to server our app. Default: 18080. \n\nasync – whether we want to run application asynchronously or not. Default: false. \n\nlogLevel – the logging level of our server. Default: Info. \n\n\n\ninline crow::SimpleApp &get_app()\n\nGet the app object. \n\nReturns\n\ncrow::SimpleApp& \n\nPrivate Functions\n\n\n\nvoid vector_resource_endpoints()\n\nMethod defining the “Vectors” Resource endpoints. \n\n\n\nvoid matrix_resource_endpoints()\n\nMethod defining the “Matrices” Resource endpoints. \n\n\n\nvoid vector_operations_endpoints()\n\nMethod defining the “Vectors” operations endpoints. \n\n\n\nvoid matrix_operations_endpoints()\n\nMethod defining the “Matrices” operations endpoints. \n\n\n\ncrow::response add_vectors(int id1, int id2)\n\nMethod in charge of retrieving the Vector resources from the DB and adding them. \n\nParameters\n\nid1 – - the id of the first Vector. \n\nid2 – - the id of the second Vector. \n\nReturns\n\ncrow::response \n\n\n\ncrow::response multiply_vectors(int id1, int id2)\n\nMethod in charge of retrieving the Vector resources from the DB and performing their dot product. \n\nParameters\n\nid1 – - the id of the first Vector. \n\nid2 – - the id of the second Vector. \n\nReturns\n\ncrow::response \n\n\n\ncrow::response add_matrices(int id1, int id2)\n\nMethod in charge of retrieving the Matrix resources from the DB and adding them. \n\nParameters\n\nid1 – - the id of the first Matrix. \n\nid2 – - the id of the second Matrix. \n\nReturns\n\ncrow::response \n\n\n\ncrow::response multiply_matrices(int id1, int id2)\n\nMethod in charge of retrieving the Matrix resources from the DB and multiplying them. \n\nParameters\n\nid1 – - the id of the first Matrix. \n\nid2 – - the id of the second Matrix. \n\nReturns\n\ncrow::response \n\nPrivate Members\n\n\n\ndb::RestDb _db\n\nThe server’s DB. \n\n\n\ncrow::SimpleApp _app\n\nThe server CROW application. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer10RestServerEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer10RestServerEv",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer10RestServerEv",
        "text": "RestServer()\n\nConstruct a new Rest Server object. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServerD0Ev",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServerD0Ev",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServerD0Ev",
        "text": "~RestServer()\n\nDestroy the Rest Server object. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer5serveEKiKbKN4crow8LogLevelE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer5serveEKiKbKN4crow8LogLevelE",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer5serveEKiKbKN4crow8LogLevelE",
        "text": "void serve(const int port = 18080, const bool async = false, const crow::LogLevel logLevel = crow::LogLevel::Info)\n\nMethod for serving our application. \n\nParameters\n\nport – the port in which we want to server our app. Default: 18080. \n\nasync – whether we want to run application asynchronously or not. Default: false. \n\nlogLevel – the logging level of our server. Default: Info. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer7get_appEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer7get_appEv",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer7get_appEv",
        "text": "inline crow::SimpleApp &get_app()\n\nGet the app object. \n\nReturns\n\ncrow::SimpleApp& "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer25vector_resource_endpointsEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer25vector_resource_endpointsEv",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer25vector_resource_endpointsEv",
        "text": "void vector_resource_endpoints()\n\nMethod defining the “Vectors” Resource endpoints. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer25matrix_resource_endpointsEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer25matrix_resource_endpointsEv",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer25matrix_resource_endpointsEv",
        "text": "void matrix_resource_endpoints()\n\nMethod defining the “Matrices” Resource endpoints. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer27vector_operations_endpointsEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer27vector_operations_endpointsEv",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer27vector_operations_endpointsEv",
        "text": "void vector_operations_endpoints()\n\nMethod defining the “Vectors” operations endpoints. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer27matrix_operations_endpointsEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer27matrix_operations_endpointsEv",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer27matrix_operations_endpointsEv",
        "text": "void matrix_operations_endpoints()\n\nMethod defining the “Matrices” operations endpoints. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer11add_vectorsEii",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer11add_vectorsEii",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer11add_vectorsEii",
        "text": "crow::response add_vectors(int id1, int id2)\n\nMethod in charge of retrieving the Vector resources from the DB and adding them. \n\nParameters\n\nid1 – - the id of the first Vector. \n\nid2 – - the id of the second Vector. \n\nReturns\n\ncrow::response "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer16multiply_vectorsEii",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer16multiply_vectorsEii",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer16multiply_vectorsEii",
        "text": "crow::response multiply_vectors(int id1, int id2)\n\nMethod in charge of retrieving the Vector resources from the DB and performing their dot product. \n\nParameters\n\nid1 – - the id of the first Vector. \n\nid2 – - the id of the second Vector. \n\nReturns\n\ncrow::response "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer12add_matricesEii",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer12add_matricesEii",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer12add_matricesEii",
        "text": "crow::response add_matrices(int id1, int id2)\n\nMethod in charge of retrieving the Matrix resources from the DB and adding them. \n\nParameters\n\nid1 – - the id of the first Matrix. \n\nid2 – - the id of the second Matrix. \n\nReturns\n\ncrow::response "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer17multiply_matricesEii",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer17multiply_matricesEii",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer17multiply_matricesEii",
        "text": "crow::response multiply_matrices(int id1, int id2)\n\nMethod in charge of retrieving the Matrix resources from the DB and multiplying them. \n\nParameters\n\nid1 – - the id of the first Matrix. \n\nid2 – - the id of the second Matrix. \n\nReturns\n\ncrow::response "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer3_dbE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer3_dbE",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer3_dbE",
        "text": "db::RestDb _db\n\nThe server’s DB. "
    },
    {
        "objectID": "api/cpp-rest/server",
        "href": "api/cpp-rest/server.html#_CPPv4N5ansys4rest6server10RestServer4_appE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4rest6server10RestServer4_appE",
        "section": "C++ REST server module > _CPPv4N5ansys4rest6server10RestServer4_appE",
        "text": "crow::SimpleApp _app\n\nThe server CROW application. "
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "The API Eigen example package is a simple project for showing PyAnsys\nusers and developers the differences between the API REST communication protocol\nand the gRPC communication protocol that is used extensively in PyAnsys libraries.\nThis project has multiple language implementations.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#api-eigen-example-python-project",
        "title": "Getting started > API Eigen Example Python project",
        "section": "API Eigen Example Python project",
        "text": "To use the API Eigen Example project in its Python version, you do not need any specific requirements or\nadditional software, apart from the ones that are installed via the requirements --all-files\nand a CMake version of the Eigen library.\nAPI Eigen Example Python project\n--all-files"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "First install the Eigen library (and CMake if it is not present). For Ubuntu distributions, it is as\neasy as running:\nTo install a local version of the API Eigen Example project, clone the repository\nthrough the Ansys GitHub Enterprise account:\nIf you want to use Python versions of the API Eigen Example project, install the\ndemo-eigen-wrapper, which is a wrapper to the Eigen library that uses pybind11:\nFinally, install the project with:\nInstallation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#starting-to-use-the-project",
        "title": "Getting started > Starting to use the project",
        "section": "Starting to use the project",
        "text": "Once the API Eigen Example project has been installed, start to make use of the Python\npackages by importing them:\nFor more examples, see the user_guide.\nStarting to use the project"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#api-eigen-example-c-project",
        "title": "Getting started > API Eigen Example C++ project",
        "section": "API Eigen Example C++ project",
        "text": "API Eigen Example C++ project"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "To use the API Eigen Example C++ projects, the installation process is a bit more cumbersome.\nFirst install the packaged library cmake:\nDepending on the C++ project, dependencies vary. Go to your sections of interest from those that follow.\nInstallation\ncmake"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation-of-the-c-rest-server",
        "title": "Getting started > Installation of the C++ REST Server",
        "section": "Installation of the C++ REST Server",
        "text": "Installing the C++ REST server manually is a simple process. Run the following commands from\nthe root of the repository:\nOnce dependencies are installed, you can use the C++ REST server. Start writing your own C++ main.cpp file and\ninclude the project header files as follows:\nFor compiling, link the library with:\nYou can run your server with:\nInstallation of the C++ REST Server\nmain.cpp"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation-of-the-c-rest-client",
        "title": "Getting started > Installation of the C++ REST Client",
        "section": "Installation of the C++ REST Client",
        "text": "Installing the C++ REST client manually is a bit more complex. You must install some\ndevelopment libraries and compile in place some additional external libraries.\nFirst, install a dev version of libcurl. Using the Ubuntu package manager apt, you can run:\nOnce libcurl-dev is installed, you must compile some external projects. These external projects have\nbeen frozen at a given version within this repository. You can find them in the external folder.\nTo install them, run these commands:\nOnce dependencies are installed, you can build and install the client library with:\nYou can use the REST C++ Client library. Start writing your own C++ client.cpp file and\ninclude the project header files as follows:\nFor compiling, link the library as follows:\nYou can run your client app with:\nInstallation of the C++ REST Client\ndev\nlibcurl\napt\nlibcurl-dev\nexternal\nclient.cpp"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation-of-the-c-grpc-server",
        "title": "Getting started > Installation of the C++ gRPC Server",
        "section": "Installation of the C++ gRPC Server",
        "text": "Installing the C++ gRPC server manually is a simple process. To use the conan package manager\nto install dependencies, run the following command lines from the root of the repository:\nYou might need to run the previous install and deploy commands with root privileges.\nOnce dependencies are installed, you can use the C++ gRPC server. Start writing your own C++ main.cpp file and\ninclude the project header files as follows:\nFor compiling, link the library as follows:\nYou can run your server with:\nInstallation of the C++ gRPC Server\ninstall\ndeploy\nmain.cpp"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation-of-the-c-grpc-client",
        "title": "Getting started > Installation of the C++ gRPC Client",
        "section": "Installation of the C++ gRPC Client",
        "text": "Installing the C++ gRPC client manually is a simple process. To use the conan\npackage manager to install dependencies, run the following commands from the root of the repository:\nYou might need to run the previous install and deploy commands with root privileges.\nOnce dependencies are installed, you can use the C++ gRPC client. Start writing your own C++ main.cpp file and\ninclude the project header files as follows:\nFor compiling, link the library as follows:\nYou can run your client with:\nInstallation of the C++ gRPC Client\ninstall\ndeploy\nmain.cpp"
    },
    {
        "objectID": "docker/index",
        "href": "docker/index.html#docker-examples",
        "title": "Docker examples",
        "section": "Docker examples",
        "text": "As part of the development of this project, several Docker images were created to allow\ndirect use of the client and server modules for both REST and gRPC using Python and C++.\nYou can refer to demo section of interest to you.\nDocker examples"
    },
    {
        "objectID": "docker/index",
        "href": "docker/index.html#rest-api-using-python",
        "title": "Docker examples > REST API using Python",
        "section": "REST API using Python",
        "text": "For this demo, the following Docker containers are available:\npython-rest-client: Docker container with the needed packages for running the implemented client (from from ansys.eigen.python.rest.client import DemoRESTClient)\npython-rest-server: Docker container with the needed packages for running the server with the Eigen library solver\nThese Docker containers are available at the GitHub Container Registry. You can download the latest version with:\nHowever, you can also build these Docker containers manually from the root directory of the repository with:\nThe server Docker image is a standalone Flask app that starts whenever the image is run. This way,\nyou do not have to perform any other operation apart from running the Docker image.\nTo run the server Docker image manually, you must run:\nThe client Docker image is a standalone JupyterLab app that starts whenever the image is run. This JupyterLab\napp contains a demo Jupyter Notebook that you can run to test the client itself. Furthermore, you can open a new\nJupyter Notebook within JupyterLab and start creating your own app.\nTo run the client Docker image manually, you must run:\nHowever, deploying Docker containers manually is not the easiest way to test them. To start playing around with\nthem, you can use the docker-compose task at https://github.com/ansys/api-eigen-example/blob/main/docker/python-rest/docker-compose.yml.\nThis task simplifies the deployment of both Docker containers and eases the configuration characteristics of each of them\nbecause they are located in the same Docker network.\nTo launch the Docker compose task, simply run the following wherever the docker-compose.yml file is located:\nYou can then start playing around with the Docker compose demo.\nREST API using Python\npython-rest-client\nfrom ansys.eigen.python.rest.client import DemoRESTClient\npython-rest-server\ndocker-compose.yml"
    },
    {
        "objectID": "docker/index",
        "href": "docker/index.html#grpc-api-using-python",
        "title": "Docker examples > gRPC API using Python",
        "section": "gRPC API using Python",
        "text": "For this demo, the following Docker containers are available:\npython-grpc-client: Docker container with the needed packages for running the implemented client (from ansys.eigen.python.grpc.client import DemoGRPCClient)\npython-grpc-server: Docker container with the needed packages for running the server with the Eigen library solver\nThese Docker containers are available at the GitHub Container Registry. You can download the latest version with:\nHowever, you can also build these Docker containers manually from the root directory of the repository with:\nThe server Docker image is a standalone gRPC server that starts whenever the image is run. This way,\nyou do not have to perform any other operation apart from running the Docker image.\nTo run the server Docker image manually, you must run:\nThe client Docker image is a standalone JupyterLab app that starts whenever the image is run. This JupyterLab\napp contains a demo Jupyter Notebook that you can run to test the client itself. Furthermore, you can open a new\nJupyter Notebook within the JupyterLab and start creating your own app.\nTo run the client Docker image manually, you must run:\nHowever, deploying Docker containers manually is not the easiest way to test them. To start playing around with\nthem, you can use the docker-compose task at https://github.com/ansys/api-eigen-example/blob/main/docker/python-grpc/docker-compose.yml.\nThis task simplifies the deployment of both Docker containers and eases the configuration characteristics of each of them\nbecause they are located in the same Docker network.\nTo launch the Docker compose task, simply run the following command wherever the docker-compose.yml file is located:\nYou can then start playing around with the Docker compose demo.\ngRPC API using Python\npython-grpc-client\nansys.eigen.python.grpc.client import DemoGRPCClient\npython-grpc-server\ndocker-compose.yml"
    },
    {
        "objectID": "docker/index",
        "href": "docker/index.html#rest-api-using-c",
        "title": "Docker examples > REST API using C++",
        "section": "REST API using C++",
        "text": "For this demo, the following Docker containers are available:\ncpp-rest-client: Docker container with the needed packages for running the implemented client (#include <apieigen/rest/EigenClient.hpp>)\ncpp-rest-server: Docker container with the needed packages for running the server with the Eigen library solver\nThese Docker containers are available at the GitHub Container Registry. You can download the latest version with:\nHowever, you can also build these Docker containers manually from the root directory of the repository with:\nThe server Docker image is a standalone CrowCpp app that starts whenever the image is run. This way,\nyou do not have to perform any other operation apart from running the Docker image.\nTo run the server Docker image manually, you must run:\nThe client Docker image is a standalone JupyterLab app that starts whenever the image is run. This JupyterLab\napp contains a demo Jupyter Notebook that you can run to test the client itself. Furthermore, you can open a new\nJupyter Notebook within JupyterLab and start creating your own app.\nTo run the client Docker image manually, you must run:\nEven though dealing with a C++ implementation, thanks to cling and\nxeus-cling, this demo is capable of demonstrating\nvia Jupyter Notebooks the functionalities of the C++ client as if it were an interpretable language (like Python or Matlab).\nSpecial thanks to their contributors for these great packages.\nHowever, deploying Docker containers manually is not the easiest way to test them. To start playing around with\nthem, you can use the docker-compose task at https://github.com/ansys/api-eigen-example/blob/main/docker/cpp-rest/docker-compose.yml.\nThis task simplifies the deployment of both Docker containers and eases the configuration characteristics of each of them\nbecause they are be located in the same Docker network.\nTo launch the Docker compose task, simply run the following command where the docker-compose.yml file is located:\nYou can then start playing around with the Docker compose demo.\nREST API using C++\ncpp-rest-client\n#include <apieigen/rest/EigenClient.hpp>\ncpp-rest-server\ndocker-compose.yml"
    },
    {
        "objectID": "docker/index",
        "href": "docker/index.html#grpc-api-using-c",
        "title": "Docker examples > gRPC API using C++",
        "section": "gRPC API using C++",
        "text": "For this demo, the following Docker containers are available:\ncpp-grpc-client: Docker container with the needed packages for running the implemented client (#include <apieigen/grpc/GRPCClient.hpp>)\ncpp-grpc-server: Docker container with the needed packages for running the server with the Eigen library solver\nThese Docker containers are available at the GitHub Container Registry. You can download the latest version with:\nHowever, you can also build these Docker containers manually from the root directory of the repository with:\nThe server Docker image is a standalone gRPC app that starts whenever the image is run. This way,\nyou do not have to perform any other operation apart from running the Docker image.\nTo run the server Docker image manually, you must run:\nThe client Docker image is a standalone JupyterLab app that starts whenever the image is run. This JupyterLab\napp contains a demo Jupyter Notebook that you can run to test the client itself. Furthermore, you can open a new Jupyter\nNotebook within JupyterLab and start creating your own app.\nTo run the client Docker image manually, you must run:\nEven though dealing with a C++ implementation, thanks to cling and\nxeus-cling, this demo is capable of demonstrating\nvia Jupyter Notebooks the functionalities of the C++ client as if it were an interpretable language (like Python or Matlab).\nSpecial thanks to their contributors for these great packages.\nHowever, deploying the Docker containers manually is not the easiest way to test them. To start playing around with\nthem, you can use the docker-compose task at https://github.com/ansys/api-eigen-example/blob/main/docker/cpp-grpc/docker-compose.yml.\nThis task simplifies the deployment of both Docker containers and eases the configuration characteristics of each of them\nbecause they are located in the same Docker network.\nTo launch the Docker compose task, simply run the following command wherever the docker-compose.yml file is located:\nYou can then start playing around with the Docker compose demo.\ngRPC API using C++\ncpp-grpc-client\n#include <apieigen/grpc/GRPCClient.hpp>\ncpp-grpc-server\ndocker-compose.yml"
    },
    {
        "objectID": "api/python-rest/restdb",
        "href": "api/python-rest/restdb.html#python-rest-database-module",
        "title": "Python REST database module",
        "section": "Python REST database module",
        "text": "Python implementation of the REST API Eigen example database.\nGet the database instance of the Flask app.\nConnection to the app’s database.\nInitialize a simple database for storing API REST data.\nPython REST database module\nConnection"
    },
    {
        "objectID": "api/python-rest/restdb",
        "href": "api/python-rest/restdb.html#ansys.eigen.python.rest.restdb.db.get_db",
        "title": "Python REST database module > Python REST database module > get_db",
        "section": "Python REST database module > get_db",
        "text": "ansys.eigen.python.rest.restdb.db.get_db()\n\nGet the database instance of the Flask app.\n\nReturns\n\nConnection\n\nConnection to the app’s database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-rest/restdb",
        "href": "api/python-rest/restdb.html#ansys.eigen.python.rest.restdb.db.init_app_db",
        "title": "Python REST database module > Python REST database module > init_app_db",
        "section": "Python REST database module > init_app_db",
        "text": "ansys.eigen.python.rest.restdb.db.init_app_db(app)\n\nInitialize a simple database for storing API REST data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#api-eigen-example-documentation-001",
        "title": "API Eigen Example Documentation 0.0.1",
        "section": "API Eigen Example Documentation 0.0.1",
        "text": "API Eigen Example Documentation 0.0.1"
    },
    {
        "objectID": "index",
        "href": "index.html#introduction",
        "title": "API Eigen Example Documentation 0.0.1 > Introduction",
        "section": "Introduction",
        "text": "The API Eigen Example package is a simple demo project for showing PyAnsys users and developers the\ndifferences between the API REST communication protocol and the gRPC communication protocol, which is\nused extensively in PyAnsys libraries.\nThe main goal of this demo project is to expose the Eigen library\nto end users via a client-server interaction that can be implemented using API REST or gRPC communication protocols.\nThe server exposes certain functionalities of the Eigen library, such as adding and\nmultiplying Eigen::VectorXd and Eigen::MatrixXd objects. The computational operations are\nperformed in the Eigen Library installed within the server, and the results are returned to the\nend user (or client). Thus, it is not necessary for the client to have the Eigen library installed.\nThe client is intended to aid end users because it provides them with tools for communicating with the server\nwithout needing to know the specifics of the protocol implemented. However, you can use CURL commands to interact\ndirectly with the server via API REST communication.\nThis demo project contains four different examples:\nA Python REST API demo using both client-server features, which has\na wrapping over the Eigen library using pybind11.\nA Python gRPC API demo using both client-server features, which\nhas a wrapping over the Eigen library using pybind11.\nA C++ REST API demo using both client-server features,\nwith direct interaction with the Eigen Library on the server side.\nA C++ gRPC API demo using both client-server features, with\ndirect interaction with the Eigen Library on the server side.\nIntroduction\nEigen::VectorXd\nEigen::MatrixXd"
    },
    {
        "objectID": "index",
        "href": "index.html#features",
        "title": "API Eigen Example Documentation 0.0.1 > Features",
        "section": "Features",
        "text": "This demo package provides these primary features:\nA client providing end users with the ability to perform server-side operations\nwithout knowing details on the communication protocol being employed\nCore examples on how to expose a service (that is, the Eigen Library) via a server using\ndifferent communication protocols.\nBenchmark tests showing the performance of each of the client-server and programming\nlanguage implementations.\nFeatures"
    },
    {
        "objectID": "index",
        "href": "index.html#project-index",
        "title": "API Eigen Example Documentation 0.0.1 > Project index",
        "section": "Project index",
        "text": "genindex\nProject index"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes the different API modules at a high level.\nAPI reference"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contributing",
        "title": "Contributing",
        "section": "Contributing",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar with\nit and all Guidelines and Best Practices before attempting to\ncontribute to the API Eigen Example repository.\nThe following contribution information is specific to the API Eigen Example repository.\nContributing"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#cloning-the-api-eigen-example-repository",
        "title": "Contributing > Cloning the API Eigen Example Repository",
        "section": "Cloning the API Eigen Example Repository",
        "text": "Run this code to clone and install the latest version of the repository in development\nmode:\nCloning the API Eigen Example Repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#building-documentation",
        "title": "Contributing > Building documentation",
        "section": "Building documentation",
        "text": "To build the documentation locally you need to follow these steps at the root\ndirectory of the repository:\nAfter the build completes, the HTML documentation is located in the\n_builds/html directory. You can load the index.html into a web\nbrowser. To clear the documentation directory, you can run:\nBuilding documentation\n_builds/html\nindex.html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#posting-issues",
        "title": "Contributing > Posting issues",
        "section": "Posting issues",
        "text": "Use the API Eigen Example Issues page to\nsubmit questions, report bugs, and request new features.\nPosting issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#code-style",
        "title": "Contributing > Code style",
        "section": "Code style",
        "text": "API Eigen Examples is compliant with the PyAnsys Development Code Style Guide.  Code style is checked\nby making use of pre-commit. Install this tool and\nactivate it with:\nThen, you can make use of the available configuration file .pre-commit-config.yml,\nwhich is automatically detected by pre-commit:\nCode style\n.pre-commit-config.yml"
    },
    {
        "objectID": "examples/01-grpc-examples/index",
        "href": "examples/01-grpc-examples/index.html#api-eigen-example---grpc-demo",
        "title": "API Eigen Example - gRPC Demo",
        "section": "API Eigen Example - gRPC Demo",
        "text": "These examples demonstrate full examples of API gRPC interaction between a server and a client.\nsphx_glr_examples_01-grpc-examples_python_grpc_demo.py\nAPI Eigen Example - gRPC Demo"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#benchmark-results",
        "title": "Benchmark results",
        "section": "Benchmark results",
        "text": "One of the tasks of this project is to evaluate the performance of different implementations, including using REST versus gRPC\nand the impact of the language used. This page displays the latest benchmark test results uploaded to the repository.\nSubsequent sections categorize these test results according to their implementation language. All sections have the this set of\ntests for both protocols:\nAdding two vectors of multiple sizes\nPerforming a dot product of two vectors of multiple sizes\nAdding two square matrices of multiple sizes\nMultiplying two matrices of multiple sizes\nGraphs show the parametrized sizes for these benchmark tests. The graphs are basically a sequence of powers of 2 (that is,\n2, 4, 8, 16, and so on). The final value is currently set to 2048, but it is easily adaptable.\nBenchmark results"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#benchmark-test-results",
        "title": "Benchmark results > Benchmark test results",
        "section": "Benchmark test results",
        "text": "Benchmark test results"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#layout",
        "title": "Benchmark results > Layout",
        "section": "Layout",
        "text": "Language implementation: Python, C++\nAPI Protocol: REST, gRPC\nNumber of elements in data structures (that is, size of vector, matrix)\nLayout"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#adding-vectors",
        "title": "Benchmark results > Adding vectors",
        "section": "Adding vectors",
        "text": "Adding vectors"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#multiplying-vectors",
        "title": "Benchmark results > Multiplying vectors",
        "section": "Multiplying vectors",
        "text": "Multiplying vectors"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#adding-matrices",
        "title": "Benchmark results > Adding matrices",
        "section": "Adding matrices",
        "text": "Adding matrices"
    },
    {
        "objectID": "benchmark/index",
        "href": "benchmark/index.html#multiplying-matrices",
        "title": "Benchmark results > Multiplying matrices",
        "section": "Multiplying matrices",
        "text": "Multiplying matrices"
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#c-rest-database-module",
        "title": "C++ REST database module",
        "section": "C++ REST database module",
        "text": "Namespace including the API Eigen Example Server REST DB functionalities. \nEnum holding the types of variables handled. \nValues:\nThe Vector type. \nThe Matrix type. \nMethod for returning the enum value as a std::string. \nvalue – the enum value we want as a std::string. \nstd::string \nCallback to be executed after function is complete. \nvalue – pointer to the argument passed in sqlite3_exec. \nargc – number of callbacks to process. \nargv – values in each callback. \nazColName – name of the cols in the callback. \nint \nClass for establishing a connection with the REST DB and interacting with it. \nConstruct a new Rest Db object. \nDestroy the Rest Db object. \nMethod for storing a Resource in the REST DB. \ntype – the type of resource processed. \ninput – the JSON request body from where the resource is parsed. \nlong - the id of the inserted row in the DB. \nMethod in charge of loading a stored resource in the DB from a given ID. \ntype – the type of resource processed. \ninput – the id of the resource inside the DB. \nstd::string - the resource loaded from the DB (as a string). \nMethod for initializing the REST DB to be used. \nA pointer to the DB connection. \nC++ REST database module"
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2dbE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2dbE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2dbE",
        "text": "namespace db\n\nNamespace including the API Eigen Example Server REST DB functionalities. \n\nEnums\n\n\n\nenum class DbTypes\n\nEnum holding the types of variables handled. \n\nValues:\n\n\n\nenumerator VECTOR\n\nThe Vector type. \n\n\n\nenumerator MATRIX\n\nThe Matrix type. \n\nFunctions\n\n\n\nstd::string dbtype_to_str(const DbTypes &value)\n\nMethod for returning the enum value as a std::string. \n\nParameters\n\nvalue – the enum value we want as a std::string. \n\nReturns\n\nstd::string \n\n\n\nstatic int callback(void *value, int argc, char **argv, char **azColName)\n\nCallback to be executed after function is complete. \n\nParameters\n\nvalue – pointer to the argument passed in sqlite3_exec. \n\nargc – number of callbacks to process. \n\nargv – values in each callback. \n\nazColName – name of the cols in the callback. \n\nReturns\n\nint \n\n\n\nclass RestDb\n\nClass for establishing a connection with the REST DB and interacting with it. \n\nPublic Functions\n\n\n\nRestDb()\n\nConstruct a new Rest Db object. \n\n\n\n~RestDb()\n\nDestroy the Rest Db object. \n\n\n\nlong store_resource(const DbTypes &type, const std::string &input)\n\nMethod for storing a Resource in the REST DB. \n\nParameters\n\ntype – the type of resource processed. \n\ninput – the JSON request body from where the resource is parsed. \n\nReturns\n\nlong - the id of the inserted row in the DB. \n\n\n\nstd::string load_resource(const DbTypes &type, const int &input)\n\nMethod in charge of loading a stored resource in the DB from a given ID. \n\nParameters\n\ntype – the type of resource processed. \n\ninput – the id of the resource inside the DB. \n\nReturns\n\nstd::string - the resource loaded from the DB (as a string). \n\nPrivate Functions\n\n\n\nvoid initialize_db()\n\nMethod for initializing the REST DB to be used. \n\nPrivate Members\n\n\n\nsqlite3 *_db\n\nA pointer to the DB connection. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db7DbTypesE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db7DbTypesE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db7DbTypesE",
        "text": "enum class DbTypes\n\nEnum holding the types of variables handled. \n\nValues:\n\n\n\nenumerator VECTOR\n\nThe Vector type. \n\n\n\nenumerator MATRIX\n\nThe Matrix type. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db7DbTypes6VECTORE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db7DbTypes6VECTORE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db7DbTypes6VECTORE",
        "text": "enumerator VECTOR\n\nThe Vector type. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db7DbTypes6MATRIXE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db7DbTypes6MATRIXE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db7DbTypes6MATRIXE",
        "text": "enumerator MATRIX\n\nThe Matrix type. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db13dbtype_to_strERK7DbTypes",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db13dbtype_to_strERK7DbTypes",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db13dbtype_to_strERK7DbTypes",
        "text": "std::string dbtype_to_str(const DbTypes &value)\n\nMethod for returning the enum value as a std::string. \n\nParameters\n\nvalue – the enum value we want as a std::string. \n\nReturns\n\nstd::string "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db8callbackEPviPPcPPc",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db8callbackEPviPPcPPc",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db8callbackEPviPPcPPc",
        "text": "static int callback(void *value, int argc, char **argv, char **azColName)\n\nCallback to be executed after function is complete. \n\nParameters\n\nvalue – pointer to the argument passed in sqlite3_exec. \n\nargc – number of callbacks to process. \n\nargv – values in each callback. \n\nazColName – name of the cols in the callback. \n\nReturns\n\nint "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDbE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDbE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDbE",
        "text": "class RestDb\n\nClass for establishing a connection with the REST DB and interacting with it. \n\nPublic Functions\n\n\n\nRestDb()\n\nConstruct a new Rest Db object. \n\n\n\n~RestDb()\n\nDestroy the Rest Db object. \n\n\n\nlong store_resource(const DbTypes &type, const std::string &input)\n\nMethod for storing a Resource in the REST DB. \n\nParameters\n\ntype – the type of resource processed. \n\ninput – the JSON request body from where the resource is parsed. \n\nReturns\n\nlong - the id of the inserted row in the DB. \n\n\n\nstd::string load_resource(const DbTypes &type, const int &input)\n\nMethod in charge of loading a stored resource in the DB from a given ID. \n\nParameters\n\ntype – the type of resource processed. \n\ninput – the id of the resource inside the DB. \n\nReturns\n\nstd::string - the resource loaded from the DB (as a string). \n\nPrivate Functions\n\n\n\nvoid initialize_db()\n\nMethod for initializing the REST DB to be used. \n\nPrivate Members\n\n\n\nsqlite3 *_db\n\nA pointer to the DB connection. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDb6RestDbEv",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDb6RestDbEv",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDb6RestDbEv",
        "text": "RestDb()\n\nConstruct a new Rest Db object. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDbD0Ev",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDbD0Ev",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDbD0Ev",
        "text": "~RestDb()\n\nDestroy the Rest Db object. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDb14store_resourceERK7DbTypesRKNSt6stringE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDb14store_resourceERK7DbTypesRKNSt6stringE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDb14store_resourceERK7DbTypesRKNSt6stringE",
        "text": "long store_resource(const DbTypes &type, const std::string &input)\n\nMethod for storing a Resource in the REST DB. \n\nParameters\n\ntype – the type of resource processed. \n\ninput – the JSON request body from where the resource is parsed. \n\nReturns\n\nlong - the id of the inserted row in the DB. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDb13load_resourceERK7DbTypesRKi",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDb13load_resourceERK7DbTypesRKi",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDb13load_resourceERK7DbTypesRKi",
        "text": "std::string load_resource(const DbTypes &type, const int &input)\n\nMethod in charge of loading a stored resource in the DB from a given ID. \n\nParameters\n\ntype – the type of resource processed. \n\ninput – the id of the resource inside the DB. \n\nReturns\n\nstd::string - the resource loaded from the DB (as a string). "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDb13initialize_dbEv",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDb13initialize_dbEv",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDb13initialize_dbEv",
        "text": "void initialize_db()\n\nMethod for initializing the REST DB to be used. "
    },
    {
        "objectID": "api/cpp-rest/restdb",
        "href": "api/cpp-rest/restdb.html#_CPPv4N5ansys4rest2db6RestDb3_dbE",
        "title": "C++ REST database module > C++ REST database module > _CPPv4N5ansys4rest2db6RestDb3_dbE",
        "section": "C++ REST database module > _CPPv4N5ansys4rest2db6RestDb3_dbE",
        "text": "sqlite3 *_db\n\nA pointer to the DB connection. "
    },
    {
        "objectID": "api/cpp-grpc/index",
        "href": "api/cpp-grpc/index.html#c-grpc-subpackage",
        "title": "C++ gRPC subpackage",
        "section": "C++ gRPC subpackage",
        "text": "The C++ gRPC subpackage contains the needed elements for client-server interaction using gRPC.\nC++ gRPC subpackage"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.098 total execution time for 2 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-rest-examples_python_rest_demo.py (../../examples/00-rest-examples/python_rest_demo.py)\n00:00.076\n0.0\nsphx_glr_examples_01-grpc-examples_python_grpc_demo.py (../../examples/01-grpc-examples/python_grpc_demo.py)\n00:00.022\n0.0\nComputation times\n../../examples/00-rest-examples/python_rest_demo.py\n../../examples/01-grpc-examples/python_grpc_demo.py"
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#c-rest-client-module",
        "title": "C++ REST client module",
        "section": "C++ REST client module",
        "text": "Namespace including the API Eigen Example Client implemented in C++. \nMethod for printing out Response objects in a common format. \nresponse – the RestClient::Response object. \nClass containing the basic functionalities to interact with the API Eigen Example server. \nConstruct a new Eigen Client object. \nbaseUrl – the API Eigen Example server endpoint (e.g. http://127.0.0.1:18080). \nuser – (optional) the user in case of BasicAuthentication mechanism required. Default: empty. \npwd – (optional) the password in case of BasicAuthentication mechanism required. Default: empty. \ntimeout – (optional) the timeout to be set for aborting connection. Default: 10. \ndebug_log – whether to show the enhanced debugging logs or not. Default: false. \nDestroy the Eigen Client object. \nMethod to request a greeting from the endpoint server. \nMethod in charge of requesting a vector addition to the endpoint server. \nvec1 – the first vector involved in the operation. \nvec2 – the second vector involved in the operation. \nstd::vector<double> \nMethod in charge of requesting a vector dot product to the endpoint server. \nvec1 – the first vector involved in the operation. \nvec2 – the second vector involved in the operation. \ndouble \nMethod in charge of requesting a matrix addition to the endpoint server. \nmat1 – the first matrix involved in the operation. \nmat2 – the second matrix involved in the operation. \nstd::vector<std::vector<double>> \nMethod in charge of requesting a matrix multiplication to the endpoint server. \nmat1 – the first matrix involved in the operation. \nmat2 – the second matrix involved in the operation. \nstd::vector<std::vector<double>> \nMethod in charge of connecting to the endpoint server to POST a Vector Resource. \ninput – the vector we are interested in posting. \nint - the ID of the posted vector. \nMethod in charge of connecting to the endpoint server to POST a Matrix Resource. \ninput – the matrix we are interested in posting. \nint - the ID of the posted matrix. \nMethod in charge of transforming a std::vector of type double to a JSON object. \ninput – the vector to be formatted as a JSON object. \nJson::Value \nMethod in charge of transforming a std::vector<std::vecto> of type double to a JSON object. \ninput – the matrix to be formatted as a JSON object. \nJson::Value \nMethod in charge of transforming a JSON object which represents a vector into a std::vector<double>. \ninput – the JSON object to be formatted as a vector. \nstd::vector<double> \nMethod in charge of transforming a JSON object which represents a matrix into a std::vector<std::vector<double>>. \ninput – the JSON object to be formatted as a matrix. \nstd::vector<std::vector<double>> \nThe connection pointer to the endpoint server. \nBoolean indicating whether to show the debugging logs or not. \nC++ REST client module"
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6clientE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6clientE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6clientE",
        "text": "namespace client\n\nNamespace including the API Eigen Example Client implemented in C++. \n\nFunctions\n\n\n\nvoid print_response(const RestClient::Response &response)\n\nMethod for printing out Response objects in a common format. \n\nParameters\n\nresponse – the RestClient::Response object. \n\n\n\nclass EigenClient\n\nClass containing the basic functionalities to interact with the API Eigen Example server. \n\nPublic Functions\n\n\n\nEigenClient(const std::string &baseUrl, const std::string &user = std::string{}, const std::string &pwd = std::string{}, const int timeout = 10, const bool debug_log = false)\n\nConstruct a new Eigen Client object. \n\nParameters\n\nbaseUrl – the API Eigen Example server endpoint (e.g. http://127.0.0.1:18080). \n\nuser – (optional) the user in case of BasicAuthentication mechanism required. Default: empty. \n\npwd – (optional) the password in case of BasicAuthentication mechanism required. Default: empty. \n\ntimeout – (optional) the timeout to be set for aborting connection. Default: 10. \n\ndebug_log – whether to show the enhanced debugging logs or not. Default: false. \n\n\n\n~EigenClient()\n\nDestroy the Eigen Client object. \n\n\n\nvoid request_greeting()\n\nMethod to request a greeting from the endpoint server. \n\n\n\nstd::vector<double> add_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector addition to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\nstd::vector<double> \n\n\n\ndouble multiply_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector dot product to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\ndouble \n\n\n\nstd::vector<std::vector<double>> add_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix addition to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\n\n\nstd::vector<std::vector<double>> multiply_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix multiplication to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Functions\n\n\n\nint post_vector(const std::vector<double> &input)\n\nMethod in charge of connecting to the endpoint server to POST a Vector Resource. \n\nParameters\n\ninput – the vector we are interested in posting. \n\nReturns\n\nint - the ID of the posted vector. \n\n\n\nint post_matrix(const std::vector<std::vector<double>> &input)\n\nMethod in charge of connecting to the endpoint server to POST a Matrix Resource. \n\nParameters\n\ninput – the matrix we are interested in posting. \n\nReturns\n\nint - the ID of the posted matrix. \n\n\n\nJson::Value vector_to_json(const std::vector<double> &input)\n\nMethod in charge of transforming a std::vector of type double to a JSON object. \n\nParameters\n\ninput – the vector to be formatted as a JSON object. \n\nReturns\n\nJson::Value \n\n\n\nJson::Value matrix_to_json(const std::vector<std::vector<double>> &input)\n\nMethod in charge of transforming a std::vector<std::vecto> of type double to a JSON object. \n\nParameters\n\ninput – the matrix to be formatted as a JSON object. \n\nReturns\n\nJson::Value \n\n\n\nstd::vector<double> json_to_vector(const Json::Value &input)\n\nMethod in charge of transforming a JSON object which represents a vector into a std::vector<double>. \n\nParameters\n\ninput – the JSON object to be formatted as a vector. \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::vector<std::vector<double>> json_to_matrix(const Json::Value &input)\n\nMethod in charge of transforming a JSON object which represents a matrix into a std::vector<std::vector<double>>. \n\nParameters\n\ninput – the JSON object to be formatted as a matrix. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Members\n\n\n\nRestClient::Connection *_conn = {nullptr}\n\nThe connection pointer to the endpoint server. \n\n\n\nbool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client14print_responseERKN10RestClient8ResponseE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client14print_responseERKN10RestClient8ResponseE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client14print_responseERKN10RestClient8ResponseE",
        "text": "void print_response(const RestClient::Response &response)\n\nMethod for printing out Response objects in a common format. \n\nParameters\n\nresponse – the RestClient::Response object. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClientE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClientE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClientE",
        "text": "class EigenClient\n\nClass containing the basic functionalities to interact with the API Eigen Example server. \n\nPublic Functions\n\n\n\nEigenClient(const std::string &baseUrl, const std::string &user = std::string{}, const std::string &pwd = std::string{}, const int timeout = 10, const bool debug_log = false)\n\nConstruct a new Eigen Client object. \n\nParameters\n\nbaseUrl – the API Eigen Example server endpoint (e.g. http://127.0.0.1:18080). \n\nuser – (optional) the user in case of BasicAuthentication mechanism required. Default: empty. \n\npwd – (optional) the password in case of BasicAuthentication mechanism required. Default: empty. \n\ntimeout – (optional) the timeout to be set for aborting connection. Default: 10. \n\ndebug_log – whether to show the enhanced debugging logs or not. Default: false. \n\n\n\n~EigenClient()\n\nDestroy the Eigen Client object. \n\n\n\nvoid request_greeting()\n\nMethod to request a greeting from the endpoint server. \n\n\n\nstd::vector<double> add_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector addition to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\nstd::vector<double> \n\n\n\ndouble multiply_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector dot product to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\ndouble \n\n\n\nstd::vector<std::vector<double>> add_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix addition to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\n\n\nstd::vector<std::vector<double>> multiply_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix multiplication to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Functions\n\n\n\nint post_vector(const std::vector<double> &input)\n\nMethod in charge of connecting to the endpoint server to POST a Vector Resource. \n\nParameters\n\ninput – the vector we are interested in posting. \n\nReturns\n\nint - the ID of the posted vector. \n\n\n\nint post_matrix(const std::vector<std::vector<double>> &input)\n\nMethod in charge of connecting to the endpoint server to POST a Matrix Resource. \n\nParameters\n\ninput – the matrix we are interested in posting. \n\nReturns\n\nint - the ID of the posted matrix. \n\n\n\nJson::Value vector_to_json(const std::vector<double> &input)\n\nMethod in charge of transforming a std::vector of type double to a JSON object. \n\nParameters\n\ninput – the vector to be formatted as a JSON object. \n\nReturns\n\nJson::Value \n\n\n\nJson::Value matrix_to_json(const std::vector<std::vector<double>> &input)\n\nMethod in charge of transforming a std::vector<std::vecto> of type double to a JSON object. \n\nParameters\n\ninput – the matrix to be formatted as a JSON object. \n\nReturns\n\nJson::Value \n\n\n\nstd::vector<double> json_to_vector(const Json::Value &input)\n\nMethod in charge of transforming a JSON object which represents a vector into a std::vector<double>. \n\nParameters\n\ninput – the JSON object to be formatted as a vector. \n\nReturns\n\nstd::vector<double> \n\n\n\nstd::vector<std::vector<double>> json_to_matrix(const Json::Value &input)\n\nMethod in charge of transforming a JSON object which represents a matrix into a std::vector<std::vector<double>>. \n\nParameters\n\ninput – the JSON object to be formatted as a matrix. \n\nReturns\n\nstd::vector<std::vector<double>> \n\nPrivate Members\n\n\n\nRestClient::Connection *_conn = {nullptr}\n\nThe connection pointer to the endpoint server. \n\n\n\nbool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient11EigenClientERKNSt6stringERKNSt6stringERKNSt6stringEKiKb",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11EigenClientERKNSt6stringERKNSt6stringERKNSt6stringEKiKb",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11EigenClientERKNSt6stringERKNSt6stringERKNSt6stringEKiKb",
        "text": "EigenClient(const std::string &baseUrl, const std::string &user = std::string{}, const std::string &pwd = std::string{}, const int timeout = 10, const bool debug_log = false)\n\nConstruct a new Eigen Client object. \n\nParameters\n\nbaseUrl – the API Eigen Example server endpoint (e.g. http://127.0.0.1:18080). \n\nuser – (optional) the user in case of BasicAuthentication mechanism required. Default: empty. \n\npwd – (optional) the password in case of BasicAuthentication mechanism required. Default: empty. \n\ntimeout – (optional) the timeout to be set for aborting connection. Default: 10. \n\ndebug_log – whether to show the enhanced debugging logs or not. Default: false. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClientD0Ev",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClientD0Ev",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClientD0Ev",
        "text": "~EigenClient()\n\nDestroy the Eigen Client object. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient16request_greetingEv",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient16request_greetingEv",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient16request_greetingEv",
        "text": "void request_greeting()\n\nMethod to request a greeting from the endpoint server. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient11add_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11add_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11add_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "text": "std::vector<double> add_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector addition to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\nstd::vector<double> "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient16multiply_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient16multiply_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient16multiply_vectorsERKNSt6vectorIdEERKNSt6vectorIdEE",
        "text": "double multiply_vectors(const std::vector<double> &vec1, const std::vector<double> &vec2)\n\nMethod in charge of requesting a vector dot product to the endpoint server. \n\nParameters\n\nvec1 – the first vector involved in the operation. \n\nvec2 – the second vector involved in the operation. \n\nReturns\n\ndouble "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient12add_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient12add_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient12add_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "text": "std::vector<std::vector<double>> add_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix addition to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient17multiply_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient17multiply_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient17multiply_matricesERKNSt6vectorINSt6vectorIdEEEERKNSt6vectorINSt6vectorIdEEEE",
        "text": "std::vector<std::vector<double>> multiply_matrices(const std::vector<std::vector<double>> &mat1, const std::vector<std::vector<double>> &mat2)\n\nMethod in charge of requesting a matrix multiplication to the endpoint server. \n\nParameters\n\nmat1 – the first matrix involved in the operation. \n\nmat2 – the second matrix involved in the operation. \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient11post_vectorERKNSt6vectorIdEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11post_vectorERKNSt6vectorIdEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11post_vectorERKNSt6vectorIdEE",
        "text": "int post_vector(const std::vector<double> &input)\n\nMethod in charge of connecting to the endpoint server to POST a Vector Resource. \n\nParameters\n\ninput – the vector we are interested in posting. \n\nReturns\n\nint - the ID of the posted vector. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient11post_matrixERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11post_matrixERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient11post_matrixERKNSt6vectorINSt6vectorIdEEEE",
        "text": "int post_matrix(const std::vector<std::vector<double>> &input)\n\nMethod in charge of connecting to the endpoint server to POST a Matrix Resource. \n\nParameters\n\ninput – the matrix we are interested in posting. \n\nReturns\n\nint - the ID of the posted matrix. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient14vector_to_jsonERKNSt6vectorIdEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14vector_to_jsonERKNSt6vectorIdEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14vector_to_jsonERKNSt6vectorIdEE",
        "text": "Json::Value vector_to_json(const std::vector<double> &input)\n\nMethod in charge of transforming a std::vector of type double to a JSON object. \n\nParameters\n\ninput – the vector to be formatted as a JSON object. \n\nReturns\n\nJson::Value "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient14matrix_to_jsonERKNSt6vectorINSt6vectorIdEEEE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14matrix_to_jsonERKNSt6vectorINSt6vectorIdEEEE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14matrix_to_jsonERKNSt6vectorINSt6vectorIdEEEE",
        "text": "Json::Value matrix_to_json(const std::vector<std::vector<double>> &input)\n\nMethod in charge of transforming a std::vector<std::vecto> of type double to a JSON object. \n\nParameters\n\ninput – the matrix to be formatted as a JSON object. \n\nReturns\n\nJson::Value "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient14json_to_vectorERKN4Json5ValueE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14json_to_vectorERKN4Json5ValueE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14json_to_vectorERKN4Json5ValueE",
        "text": "std::vector<double> json_to_vector(const Json::Value &input)\n\nMethod in charge of transforming a JSON object which represents a vector into a std::vector<double>. \n\nParameters\n\ninput – the JSON object to be formatted as a vector. \n\nReturns\n\nstd::vector<double> "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient14json_to_matrixERKN4Json5ValueE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14json_to_matrixERKN4Json5ValueE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient14json_to_matrixERKN4Json5ValueE",
        "text": "std::vector<std::vector<double>> json_to_matrix(const Json::Value &input)\n\nMethod in charge of transforming a JSON object which represents a matrix into a std::vector<std::vector<double>>. \n\nParameters\n\ninput – the JSON object to be formatted as a matrix. \n\nReturns\n\nstd::vector<std::vector<double>> "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient5_connE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient5_connE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient5_connE",
        "text": "RestClient::Connection *_conn = {nullptr}\n\nThe connection pointer to the endpoint server. "
    },
    {
        "objectID": "api/cpp-rest/client",
        "href": "api/cpp-rest/client.html#_CPPv4N5ansys4rest6client11EigenClient10_debug_logE",
        "title": "C++ REST client module > C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient10_debug_logE",
        "section": "C++ REST client module > _CPPv4N5ansys4rest6client11EigenClient10_debug_logE",
        "text": "bool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "examples/00-rest-examples/index",
        "href": "examples/00-rest-examples/index.html#api-eigen-example---rest-demo",
        "title": "API Eigen Example - REST Demo",
        "section": "API Eigen Example - REST Demo",
        "text": "These examples demonstrate full examples of API REST interaction between a server and a client.\nsphx_glr_examples_00-rest-examples_python_rest_demo.py\nAPI Eigen Example - REST Demo"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#users-guide",
        "title": "User’s guide",
        "section": "User’s guide",
        "text": "This guide describes how to use the API Eigen Example package and its modules\nand components.\nUser’s guide"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#understanding-the-api-eigen-example-python-module",
        "title": "User’s guide > Understanding the API Eigen Example Python module",
        "section": "Understanding the API Eigen Example Python module",
        "text": "The``ansys.eigen.python`` package contains the necessary objects for testing the API REST\nand gRPC communication protocols, which are implemented in Python. It also includes two\nadditional Python packages:\nREST package: ansys.eigen.python.rest\ngRPC package: ansys.eigen.python.grpc\nEach of these packages contains two key modules for performing the demos: client\nand server. This section is divided into REST and gRPC package subsections.\nUnderstanding the API Eigen Example Python module\nansys.eigen.python.rest\nansys.eigen.python.grpc\nclient\nserver"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#the-api-rest-eigen-example-python-module",
        "title": "User’s guide > The API REST Eigen Example Python module",
        "section": "The API REST Eigen Example Python module",
        "text": "Import the API REST Python server and client with:\nThe API REST Python server is a Flask app that contains a SQLite database (DB). You can easily\ndeploy this server by running commands in the terminal. If you are located at the root directory\nof the repository, you can deploy this version of the server with:\nWhile the preceding commands deploy the server with default parameters, you can deploy it manually by\ncalling the create_app() method to return the Flask app and then run it using the app.run()\nmethod:\nThe Python client contains a class called DemoRESTClient that provides tools for interacting\ndirectly with the deployed server. For example, to create an API REST client for interacting with\nthe previously deployed server, you would run:\nThe client is then made available to perform operations such as:\nThe API REST Eigen Example Python module\ncreate_app()\napp.run()\nDemoRESTClient"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#the-api-grpc-eigen-example-python-module",
        "title": "User’s guide > The API gRPC Eigen Example Python module",
        "section": "The API gRPC Eigen Example Python module",
        "text": "Import the API gRPC Python server and client with:\nThe API gRPC Python server is a standalone gRPC app with no DB. You can easily deploy this server\nby running commands in the terminal. If you are located at the root directory of the repository, you\ncan deploy this version of the server with:\nWhile the preceding command deploys the server with default parameters, you can deploy it manually by\ncalling the serve() method inside the module:\nThe Python client contains a class called DemoGRPCClient that provides tools for interacting\ndirectly with the deployed server. For example, to create an API gRPC client for interacting with\nthe previously deployed server, you would run:\nThe client is then made available to perform operations such as:\nThe API gRPC Eigen Example Python module\nserve()\nDemoGRPCClient"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#understanding-the-api-eigen-example-c-module",
        "title": "User’s guide > Understanding the API Eigen Example C++ module",
        "section": "Understanding the API Eigen Example C++ module",
        "text": "The``ansys.eigen.python`` package also includes two C++ projects, which are C++ implementations of the\npreviously explained Python packages:\nC++ REST projects: src/ansys/eigen/cpp/rest\nC++ gRPC projects: src/ansys/eigen/cpp/grpc\nEach of these C++ packages contains two key modules for performing the demos: client and server.\nThis section is divided into REST and gRPC project subsections.\nUnderstanding the API Eigen Example C++ module\nsrc/ansys/eigen/cpp/rest\nsrc/ansys/eigen/cpp/grpc\nclient\nserver"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#the-api-rest-eigen-example-c-projects",
        "title": "User’s guide > The API REST Eigen Example C++ projects",
        "section": "The API REST Eigen Example C++ projects",
        "text": "First you must install the projects as per the instructions in getting_started.\nOnce projects are installed, run these include commands:\nThe API REST C++ server is a CrowCpp app that contains a SQLite DB. You can easily deploy this server by running\ncommands in the terminal.\nIf you create a simple server.cpp file, you can do the following:\nOnce the library is installed, you can compile the server.cpp file:\nYou can then run the executable that results from the compilation:\nYou see these messages as your server is being deployed:\nWhile the preceding command deploys the server with default parameters, you can deploy it with your own custom\nparameters by providing optional inputs in the serve() method.\nThe C++ client contains a class called EigenClient that provides tools for interacting\ndirectly with the deployed server. For example, to create an API REST client for interacting with\nthe previously deployed server, you could write the following code snippet in a new C++ file (for example, client.cpp)\nand then call it:\nThe client then deals with a vector addition operation via REST API interaction\nwith the server, apart from requesting a greeting.\nYou compile the client with:\nYou then run the executable that results from the compilation:\nEnjoy creating your own apps.\nThe API REST Eigen Example C++ projects\ninclude\nserver.cpp\nserver.cpp\nserve()\nEigenClient\nclient.cpp"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#the-api-grpc-eigen-example-c-projects",
        "title": "User’s guide > The API gRPC Eigen Example C++ projects",
        "section": "The API gRPC Eigen Example C++ projects",
        "text": "First you must install the projects as per the instructions in getting_started.\nOnce projects are installed, run these include commands:\nThe API gRPC C++ server is a standalone gRPC app. You can easily deploy this server by running\ncommands in the terminal.\nIf you create a simple server.cpp file, you can do the following:\nOnce the library is installed, you can compile the server.cpp file:\nYou then run the executable that results from the compilation:\nYou see these messages as your server is being deployed:\nWhile the preceding command deploys the server with default parameters, you can deploy it with your own custom\nparameters by providing optional inputs in the serve() method.\nThe C++ client contains a class called GRPCClient that provides tools for interacting\ndirectly with the server. For example, if you wanted to create an API gRPC client for interacting with\nthe previously deployed server, you would write the following code snippet in a new C++ file (for example, client.cpp)\nand then call it:\nThe client then deals with a vector addition operation via gRPC API interaction\nwith the server, apart from requesting a greeting.\nYou compile the client app with:\nYou then run the executable that results from the recompilation:\nYou see these messages as your server is being deployed:\nOn the server side, you see these logs:\nEnjoy creating your own apps.\nThe API gRPC Eigen Example C++ projects\ninclude\nserver.cpp\nserver.cpp\nserve()\nGRPCClient\nclient.cpp"
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#c-rest-service-module",
        "title": "C++ REST service module",
        "section": "C++ REST service module",
        "text": "Namespace including the API Eigen Example Server logic (i.e. service) implemented in C++. \nClass containing the server logic (i.e. service). \nConstruct a new GRPCDemo Service object. \ndebug_log – whether to show the enhanced debugging logs or not. \nDestroy the GRPCDemo Service object. \nMethod to provide a simple greeting to the client. \ncontext – the gRPC Server context. \nrequest – the gRPC request. \nresponse – the gRPC response this method will fill. \n::grpc::Status \nMethod to provide a flipped vector to the client. \ncontext – the gRPC Server context. \nstream – the gRPC stream. \n::grpc::Status \nMethod to provide the addition of Vector messages. \ncontext – the gRPC Server context. \nstream – the gRPC stream. \n::grpc::Status \nMethod to provide the dot product of Vector messages. \ncontext – the gRPC Server context. \nstream – the gRPC stream. \n::grpc::Status \nMethod to provide the addition of Matrix messages. \ncontext – the gRPC Server context. \nstream – the gRPC stream. \n::grpc::Status \nMethod to provide the multiplication of Matrix messages. \ncontext – the gRPC Server context. \nstream – the gRPC stream. \n::grpc::Status \nMethod used to deserialize a Vector message into an Eigen::VectorXd object. \nbytes – the chunk of bytes from where the vector is deserialized. \nlength – the length of the vector we are deserializing. \ntype – the type of data inside the vector (e.g. double, int…). \nEigen::VectorXd \nMethod used to serialize an Eigen::VectorXd object into a Vector message. \nvector – the Eigen::VectorXd to be serialized. \nstart – the starting index to serialize. \nend – the last index to serialize (not included). \nstd::string \nMethod used to deserialize a Matrix message into an Eigen::MatrixXd object. \nbytes – the chunk of bytes from where the matrix is deserialized. \nrows – the number of rows of the matrix we are deserializing. \ncols – the number of columns of the matrix we are deserializing. \ntype – the type of data inside the matrix (e.g. double, int…). \nEigen::MatrixXd \nMethod used to serialize an Eigen::MatrixXd object into a Matrix message. \nmatrix – the Eigen::MatrixXd to be serialized. \nstart – the starting index to serialize. \nend – the last index to serialize (not included). \nstd::string \nMethod in charge of providing a set of Eigen::VectorXd objects from a stream of Vector messages. \nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \ncontext – the gRPC context. \nstd::vector<Eigen::VectorXd> \nMethod in charge of providing a set of Eigen::MatrixXd objects from a stream of Matrix messages. \nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \ncontext – the gRPC context. \nstd::vector<Eigen::MatrixXd> \nMethod in charge of sending the resulting vector of the operation through the protocol. \nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \ncontext – the gRPC context. \nvector – the vector to be sent. \nMethod in charge of sending the resulting matrix of the operation through the protocol. \nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \ncontext – the gRPC context. \nmatrix – the matrix to be sent. \nBoolean indicating whether to show the debugging logs or not. \nC++ REST service module"
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7serviceE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7serviceE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7serviceE",
        "text": "namespace service\n\nNamespace including the API Eigen Example Server logic (i.e. service) implemented in C++. \n\n\n\nclass GRPCService : public grpcdemo::GRPCDemo::Service\n\nClass containing the server logic (i.e. service). \n\nPublic Functions\n\n\n\nGRPCService(const bool debug_log)\n\nConstruct a new GRPCDemo Service object. \n\nParameters\n\ndebug_log – whether to show the enhanced debugging logs or not. \n\n\n\n~GRPCService()\n\nDestroy the GRPCDemo Service object. \n\n\n\n::grpc::Status SayHello(::grpc::ServerContext *context, const ::grpcdemo::HelloRequest *request, ::grpcdemo::HelloReply *response) override\n\nMethod to provide a simple greeting to the client. \n\nParameters\n\ncontext – the gRPC Server context. \n\nrequest – the gRPC request. \n\nresponse – the gRPC response this method will fill. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status FlipVector(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide a flipped vector to the client. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status AddVectors(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide the addition of Vector messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status MultiplyVectors(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide the dot product of Vector messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status AddMatrices(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Matrix, ::grpcdemo::Matrix> *stream) override\n\nMethod to provide the addition of Matrix messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status MultiplyMatrices(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Matrix, ::grpcdemo::Matrix> *stream) override\n\nMethod to provide the multiplication of Matrix messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\nPrivate Functions\n\n\n\nEigen::VectorXd deserialize_vector(const std::string &bytes, const int length, grpcdemo::DataType type)\n\nMethod used to deserialize a Vector message into an Eigen::VectorXd object. \n\nParameters\n\nbytes – the chunk of bytes from where the vector is deserialized. \n\nlength – the length of the vector we are deserializing. \n\ntype – the type of data inside the vector (e.g. double, int…). \n\nReturns\n\nEigen::VectorXd \n\n\n\nstd::string serialize_vector(const Eigen::VectorXd &vector, const int start, const int end)\n\nMethod used to serialize an Eigen::VectorXd object into a Vector message. \n\nParameters\n\nvector – the Eigen::VectorXd to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nEigen::MatrixXd deserialize_matrix(const std::string &bytes, const int rows, const int cols, grpcdemo::DataType type)\n\nMethod used to deserialize a Matrix message into an Eigen::MatrixXd object. \n\nParameters\n\nbytes – the chunk of bytes from where the matrix is deserialized. \n\nrows – the number of rows of the matrix we are deserializing. \n\ncols – the number of columns of the matrix we are deserializing. \n\ntype – the type of data inside the matrix (e.g. double, int…). \n\nReturns\n\nEigen::MatrixXd \n\n\n\nstd::string serialize_matrix(const Eigen::MatrixXd &matrix, const int start, const int end)\n\nMethod used to serialize an Eigen::MatrixXd object into a Matrix message. \n\nParameters\n\nmatrix – the Eigen::MatrixXd to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nstd::vector<Eigen::VectorXd> receive_vectors(::grpc::ServerReaderWriter<grpcdemo::Vector, grpcdemo::Vector> *reader_writer, ::grpc::ServerContext *context)\n\nMethod in charge of providing a set of Eigen::VectorXd objects from a stream of Vector messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<Eigen::VectorXd> \n\n\n\nstd::vector<Eigen::MatrixXd> receive_matrices(::grpc::ServerReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix> *reader_writer, ::grpc::ServerContext *context)\n\nMethod in charge of providing a set of Eigen::MatrixXd objects from a stream of Matrix messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<Eigen::MatrixXd> \n\n\n\nvoid send_vector(::grpc::ServerReaderWriter<grpcdemo::Vector, grpcdemo::Vector> *reader_writer, ::grpc::ServerContext *context, const Eigen::VectorXd &vector)\n\nMethod in charge of sending the resulting vector of the operation through the protocol. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nvector – the vector to be sent. \n\n\n\nvoid send_matrix(::grpc::ServerReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix> *reader_writer, ::grpc::ServerContext *context, const Eigen::MatrixXd &matrix)\n\nMethod in charge of sending the resulting matrix of the operation through the protocol. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nmatrix – the matrix to be sent. \n\nPrivate Members\n\n\n\nbool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCServiceE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCServiceE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCServiceE",
        "text": "class GRPCService : public grpcdemo::GRPCDemo::Service\n\nClass containing the server logic (i.e. service). \n\nPublic Functions\n\n\n\nGRPCService(const bool debug_log)\n\nConstruct a new GRPCDemo Service object. \n\nParameters\n\ndebug_log – whether to show the enhanced debugging logs or not. \n\n\n\n~GRPCService()\n\nDestroy the GRPCDemo Service object. \n\n\n\n::grpc::Status SayHello(::grpc::ServerContext *context, const ::grpcdemo::HelloRequest *request, ::grpcdemo::HelloReply *response) override\n\nMethod to provide a simple greeting to the client. \n\nParameters\n\ncontext – the gRPC Server context. \n\nrequest – the gRPC request. \n\nresponse – the gRPC response this method will fill. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status FlipVector(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide a flipped vector to the client. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status AddVectors(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide the addition of Vector messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status MultiplyVectors(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide the dot product of Vector messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status AddMatrices(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Matrix, ::grpcdemo::Matrix> *stream) override\n\nMethod to provide the addition of Matrix messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\n\n\n::grpc::Status MultiplyMatrices(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Matrix, ::grpcdemo::Matrix> *stream) override\n\nMethod to provide the multiplication of Matrix messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status \n\nPrivate Functions\n\n\n\nEigen::VectorXd deserialize_vector(const std::string &bytes, const int length, grpcdemo::DataType type)\n\nMethod used to deserialize a Vector message into an Eigen::VectorXd object. \n\nParameters\n\nbytes – the chunk of bytes from where the vector is deserialized. \n\nlength – the length of the vector we are deserializing. \n\ntype – the type of data inside the vector (e.g. double, int…). \n\nReturns\n\nEigen::VectorXd \n\n\n\nstd::string serialize_vector(const Eigen::VectorXd &vector, const int start, const int end)\n\nMethod used to serialize an Eigen::VectorXd object into a Vector message. \n\nParameters\n\nvector – the Eigen::VectorXd to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nEigen::MatrixXd deserialize_matrix(const std::string &bytes, const int rows, const int cols, grpcdemo::DataType type)\n\nMethod used to deserialize a Matrix message into an Eigen::MatrixXd object. \n\nParameters\n\nbytes – the chunk of bytes from where the matrix is deserialized. \n\nrows – the number of rows of the matrix we are deserializing. \n\ncols – the number of columns of the matrix we are deserializing. \n\ntype – the type of data inside the matrix (e.g. double, int…). \n\nReturns\n\nEigen::MatrixXd \n\n\n\nstd::string serialize_matrix(const Eigen::MatrixXd &matrix, const int start, const int end)\n\nMethod used to serialize an Eigen::MatrixXd object into a Matrix message. \n\nParameters\n\nmatrix – the Eigen::MatrixXd to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string \n\n\n\nstd::vector<Eigen::VectorXd> receive_vectors(::grpc::ServerReaderWriter<grpcdemo::Vector, grpcdemo::Vector> *reader_writer, ::grpc::ServerContext *context)\n\nMethod in charge of providing a set of Eigen::VectorXd objects from a stream of Vector messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<Eigen::VectorXd> \n\n\n\nstd::vector<Eigen::MatrixXd> receive_matrices(::grpc::ServerReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix> *reader_writer, ::grpc::ServerContext *context)\n\nMethod in charge of providing a set of Eigen::MatrixXd objects from a stream of Matrix messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<Eigen::MatrixXd> \n\n\n\nvoid send_vector(::grpc::ServerReaderWriter<grpcdemo::Vector, grpcdemo::Vector> *reader_writer, ::grpc::ServerContext *context, const Eigen::VectorXd &vector)\n\nMethod in charge of sending the resulting vector of the operation through the protocol. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nvector – the vector to be sent. \n\n\n\nvoid send_matrix(::grpc::ServerReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix> *reader_writer, ::grpc::ServerContext *context, const Eigen::MatrixXd &matrix)\n\nMethod in charge of sending the resulting matrix of the operation through the protocol. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nmatrix – the matrix to be sent. \n\nPrivate Members\n\n\n\nbool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService11GRPCServiceEKb",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11GRPCServiceEKb",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11GRPCServiceEKb",
        "text": "GRPCService(const bool debug_log)\n\nConstruct a new GRPCDemo Service object. \n\nParameters\n\ndebug_log – whether to show the enhanced debugging logs or not. "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCServiceD0Ev",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCServiceD0Ev",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCServiceD0Ev",
        "text": "~GRPCService()\n\nDestroy the GRPCDemo Service object. "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService8SayHelloEPN4grpc13ServerContextEPKN8grpcdemo12HelloRequestEPN8grpcdemo10HelloReplyE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService8SayHelloEPN4grpc13ServerContextEPKN8grpcdemo12HelloRequestEPN8grpcdemo10HelloReplyE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService8SayHelloEPN4grpc13ServerContextEPKN8grpcdemo12HelloRequestEPN8grpcdemo10HelloReplyE",
        "text": "::grpc::Status SayHello(::grpc::ServerContext *context, const ::grpcdemo::HelloRequest *request, ::grpcdemo::HelloReply *response) override\n\nMethod to provide a simple greeting to the client. \n\nParameters\n\ncontext – the gRPC Server context. \n\nrequest – the gRPC request. \n\nresponse – the gRPC response this method will fill. \n\nReturns\n\n::grpc::Status "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService10FlipVectorEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService10FlipVectorEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService10FlipVectorEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "text": "::grpc::Status FlipVector(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide a flipped vector to the client. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService10AddVectorsEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService10AddVectorsEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService10AddVectorsEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "text": "::grpc::Status AddVectors(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide the addition of Vector messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService15MultiplyVectorsEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService15MultiplyVectorsEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService15MultiplyVectorsEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEE",
        "text": "::grpc::Status MultiplyVectors(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Vector, ::grpcdemo::Vector> *stream) override\n\nMethod to provide the dot product of Vector messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService11AddMatricesEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11AddMatricesEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11AddMatricesEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEE",
        "text": "::grpc::Status AddMatrices(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Matrix, ::grpcdemo::Matrix> *stream) override\n\nMethod to provide the addition of Matrix messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService16MultiplyMatricesEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16MultiplyMatricesEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16MultiplyMatricesEPN4grpc13ServerContextEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEE",
        "text": "::grpc::Status MultiplyMatrices(::grpc::ServerContext *context, ::grpc::ServerReaderWriter<::grpcdemo::Matrix, ::grpcdemo::Matrix> *stream) override\n\nMethod to provide the multiplication of Matrix messages. \n\nParameters\n\ncontext – the gRPC Server context. \n\nstream – the gRPC stream. \n\nReturns\n\n::grpc::Status "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService18deserialize_vectorERKNSt6stringEKiN8grpcdemo8DataTypeE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService18deserialize_vectorERKNSt6stringEKiN8grpcdemo8DataTypeE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService18deserialize_vectorERKNSt6stringEKiN8grpcdemo8DataTypeE",
        "text": "Eigen::VectorXd deserialize_vector(const std::string &bytes, const int length, grpcdemo::DataType type)\n\nMethod used to deserialize a Vector message into an Eigen::VectorXd object. \n\nParameters\n\nbytes – the chunk of bytes from where the vector is deserialized. \n\nlength – the length of the vector we are deserializing. \n\ntype – the type of data inside the vector (e.g. double, int…). \n\nReturns\n\nEigen::VectorXd "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService16serialize_vectorERKN5Eigen8VectorXdEKiKi",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16serialize_vectorERKN5Eigen8VectorXdEKiKi",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16serialize_vectorERKN5Eigen8VectorXdEKiKi",
        "text": "std::string serialize_vector(const Eigen::VectorXd &vector, const int start, const int end)\n\nMethod used to serialize an Eigen::VectorXd object into a Vector message. \n\nParameters\n\nvector – the Eigen::VectorXd to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService18deserialize_matrixERKNSt6stringEKiKiN8grpcdemo8DataTypeE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService18deserialize_matrixERKNSt6stringEKiKiN8grpcdemo8DataTypeE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService18deserialize_matrixERKNSt6stringEKiKiN8grpcdemo8DataTypeE",
        "text": "Eigen::MatrixXd deserialize_matrix(const std::string &bytes, const int rows, const int cols, grpcdemo::DataType type)\n\nMethod used to deserialize a Matrix message into an Eigen::MatrixXd object. \n\nParameters\n\nbytes – the chunk of bytes from where the matrix is deserialized. \n\nrows – the number of rows of the matrix we are deserializing. \n\ncols – the number of columns of the matrix we are deserializing. \n\ntype – the type of data inside the matrix (e.g. double, int…). \n\nReturns\n\nEigen::MatrixXd "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService16serialize_matrixERKN5Eigen8MatrixXdEKiKi",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16serialize_matrixERKN5Eigen8MatrixXdEKiKi",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16serialize_matrixERKN5Eigen8MatrixXdEKiKi",
        "text": "std::string serialize_matrix(const Eigen::MatrixXd &matrix, const int start, const int end)\n\nMethod used to serialize an Eigen::MatrixXd object into a Matrix message. \n\nParameters\n\nmatrix – the Eigen::MatrixXd to be serialized. \n\nstart – the starting index to serialize. \n\nend – the last index to serialize (not included). \n\nReturns\n\nstd::string "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService15receive_vectorsEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEPN4grpc13ServerContextE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService15receive_vectorsEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEPN4grpc13ServerContextE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService15receive_vectorsEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEPN4grpc13ServerContextE",
        "text": "std::vector<Eigen::VectorXd> receive_vectors(::grpc::ServerReaderWriter<grpcdemo::Vector, grpcdemo::Vector> *reader_writer, ::grpc::ServerContext *context)\n\nMethod in charge of providing a set of Eigen::VectorXd objects from a stream of Vector messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<Eigen::VectorXd> "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService16receive_matricesEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEPN4grpc13ServerContextE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16receive_matricesEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEPN4grpc13ServerContextE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService16receive_matricesEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEPN4grpc13ServerContextE",
        "text": "std::vector<Eigen::MatrixXd> receive_matrices(::grpc::ServerReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix> *reader_writer, ::grpc::ServerContext *context)\n\nMethod in charge of providing a set of Eigen::MatrixXd objects from a stream of Matrix messages. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nReturns\n\nstd::vector<Eigen::MatrixXd> "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService11send_vectorEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEPN4grpc13ServerContextERKN5Eigen8VectorXdE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11send_vectorEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEPN4grpc13ServerContextERKN5Eigen8VectorXdE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11send_vectorEPN4grpc18ServerReaderWriterIN8grpcdemo6VectorEN8grpcdemo6VectorEEEPN4grpc13ServerContextERKN5Eigen8VectorXdE",
        "text": "void send_vector(::grpc::ServerReaderWriter<grpcdemo::Vector, grpcdemo::Vector> *reader_writer, ::grpc::ServerContext *context, const Eigen::VectorXd &vector)\n\nMethod in charge of sending the resulting vector of the operation through the protocol. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nvector – the vector to be sent. "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService11send_matrixEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEPN4grpc13ServerContextERKN5Eigen8MatrixXdE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11send_matrixEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEPN4grpc13ServerContextERKN5Eigen8MatrixXdE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService11send_matrixEPN4grpc18ServerReaderWriterIN8grpcdemo6MatrixEN8grpcdemo6MatrixEEEPN4grpc13ServerContextERKN5Eigen8MatrixXdE",
        "text": "void send_matrix(::grpc::ServerReaderWriter<grpcdemo::Matrix, grpcdemo::Matrix> *reader_writer, ::grpc::ServerContext *context, const Eigen::MatrixXd &matrix)\n\nMethod in charge of sending the resulting matrix of the operation through the protocol. \n\nParameters\n\nreader_writer – the gRPC reader-writer in the bidirectional stream protocol. \n\ncontext – the gRPC context. \n\nmatrix – the matrix to be sent. "
    },
    {
        "objectID": "api/cpp-grpc/service",
        "href": "api/cpp-grpc/service.html#_CPPv4N5ansys4grpc7service11GRPCService10_debug_logE",
        "title": "C++ REST service module > C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService10_debug_logE",
        "section": "C++ REST service module > _CPPv4N5ansys4grpc7service11GRPCService10_debug_logE",
        "text": "bool _debug_log\n\nBoolean indicating whether to show the debugging logs or not. "
    },
    {
        "objectID": "api/cpp-rest/index",
        "href": "api/cpp-rest/index.html#c-rest-subpackage",
        "title": "C++ REST subpackage",
        "section": "C++ REST subpackage",
        "text": "The C++ REST subpackage contains the needed elements for client-server interaction using REST.\nC++ REST subpackage"
    },
    {
        "objectID": "api/python-rest/client",
        "href": "api/python-rest/client.html#python-rest-client-module",
        "title": "Python REST client module",
        "section": "Python REST client module",
        "text": "Python implementation of the REST API Eigen example client.\nBases: object\nActs as a client to the service provided by the API REST server of this same project.\nThis class has several public methods that allow for direct interaction with the server,\nwithout having to care about the formatting of the RESTful queries.\nAdd two numpy.ndarrays using the Eigen library (C++), which is exposed via the destination RESTful server.\nFirst numpy.ndarray to consider in the operation.\nSecond numpy.ndarray to consider in the operation.\nSum of adding arg1 and arg2 (arg1 + arg2).\nGet a simple summary of the connection details.\nMultiply two numpy.ndarrays using the Eigen library (C++), which is exposed via the destination RESTful server.\nFirst numpy.ndarray to consider in the operation.\nSecond numpy.ndarray to consider in the operation.\nThe result of multiplyng arg1 and arg2 (arg1 * arg2).\nSubtract two numpy.ndarrays using the Eigen library\n(C++), which is exposed via the destination RESTful server.\nFirst numpy.ndarray to consider in the operation.\nSecond numpy.ndarray to consider in the operation.\nThe result of subtracting arg2 from arg1 (arg1 - arg2).\nPython REST client module\nobject\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray\nnumpy.ndarray"
    },
    {
        "objectID": "api/python-rest/client",
        "href": "api/python-rest/client.html#ansys.eigen.python.rest.client.DemoRESTClient",
        "title": "Python REST client module > Python REST client module > DemoRESTClient",
        "section": "Python REST client module > DemoRESTClient",
        "text": "class ansys.eigen.python.rest.client.DemoRESTClient(host, port, user=None, pwd=None, client=None)\n\nBases: object\n\nActs as a client to the service provided by the API REST server of this same project.\nThis class has several public methods that allow for direct interaction with the server,\nwithout having to care about the formatting of the RESTful queries.\n\n!! processed by numpydoc !!\n\n\n\nadd(arg1, arg2)\n\nAdd two numpy.ndarrays using the Eigen library (C++), which is exposed via the destination RESTful server.\n\nParameters\n\narg1\n\nnumpy.ndarray\n\nFirst numpy.ndarray to consider in the operation.\n\narg2\n\nnumpy.ndarray\n\nSecond numpy.ndarray to consider in the operation.\n\nReturns\n\nnumpy.ndarray\n\nSum of adding arg1 and arg2 (arg1 + arg2).\n\n!! processed by numpydoc !!\n\n\n\nget_connection_details()\n\nGet a simple summary of the connection details.\n\n!! processed by numpydoc !!\n\n\n\nmultiply(arg1, arg2)\n\nMultiply two numpy.ndarrays using the Eigen library (C++), which is exposed via the destination RESTful server.\n\nParameters\n\narg1\n\nnumpy.ndarray\n\nFirst numpy.ndarray to consider in the operation.\n\narg2\n\nnumpy.ndarray\n\nSecond numpy.ndarray to consider in the operation.\n\nReturns\n\nnumpy.ndarray\n\nThe result of multiplyng arg1 and arg2 (arg1 * arg2).\n\n!! processed by numpydoc !!\n\n\n\nsubtract(arg1, arg2)\n\nSubtract two numpy.ndarrays using the Eigen library\n(C++), which is exposed via the destination RESTful server.\n\nParameters\n\narg1\n\nnumpy.ndarray\n\nFirst numpy.ndarray to consider in the operation.\n\narg2\n\nnumpy.ndarray\n\nSecond numpy.ndarray to consider in the operation.\n\nReturns\n\nnumpy.ndarray\n\nThe result of subtracting arg2 from arg1 (arg1 - arg2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-rest/client",
        "href": "api/python-rest/client.html#ansys.eigen.python.rest.client.DemoRESTClient.add",
        "title": "Python REST client module > Python REST client module > add",
        "section": "Python REST client module > add",
        "text": "add(arg1, arg2)\n\nAdd two numpy.ndarrays using the Eigen library (C++), which is exposed via the destination RESTful server.\n\nParameters\n\narg1\n\nnumpy.ndarray\n\nFirst numpy.ndarray to consider in the operation.\n\narg2\n\nnumpy.ndarray\n\nSecond numpy.ndarray to consider in the operation.\n\nReturns\n\nnumpy.ndarray\n\nSum of adding arg1 and arg2 (arg1 + arg2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-rest/client",
        "href": "api/python-rest/client.html#ansys.eigen.python.rest.client.DemoRESTClient.get_connection_details",
        "title": "Python REST client module > Python REST client module > get_connection_details",
        "section": "Python REST client module > get_connection_details",
        "text": "get_connection_details()\n\nGet a simple summary of the connection details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-rest/client",
        "href": "api/python-rest/client.html#ansys.eigen.python.rest.client.DemoRESTClient.multiply",
        "title": "Python REST client module > Python REST client module > multiply",
        "section": "Python REST client module > multiply",
        "text": "multiply(arg1, arg2)\n\nMultiply two numpy.ndarrays using the Eigen library (C++), which is exposed via the destination RESTful server.\n\nParameters\n\narg1\n\nnumpy.ndarray\n\nFirst numpy.ndarray to consider in the operation.\n\narg2\n\nnumpy.ndarray\n\nSecond numpy.ndarray to consider in the operation.\n\nReturns\n\nnumpy.ndarray\n\nThe result of multiplyng arg1 and arg2 (arg1 * arg2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/python-rest/client",
        "href": "api/python-rest/client.html#ansys.eigen.python.rest.client.DemoRESTClient.subtract",
        "title": "Python REST client module > Python REST client module > subtract",
        "section": "Python REST client module > subtract",
        "text": "subtract(arg1, arg2)\n\nSubtract two numpy.ndarrays using the Eigen library\n(C++), which is exposed via the destination RESTful server.\n\nParameters\n\narg1\n\nnumpy.ndarray\n\nFirst numpy.ndarray to consider in the operation.\n\narg2\n\nnumpy.ndarray\n\nSecond numpy.ndarray to consider in the operation.\n\nReturns\n\nnumpy.ndarray\n\nThe result of subtracting arg2 from arg1 (arg1 - arg2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-rest-examples/python_rest_demo",
        "href": "examples/00-rest-examples/python_rest_demo.html#api-eigen-example---rest-demo-using-python",
        "title": "API Eigen Example - REST Demo using Python",
        "section": "API Eigen Example - REST Demo using Python",
        "text": "This demo shows how you can use the Python REST client of the API Eigen Example\nproject to communicate with the REST server. It uses a simple Python library to\nshow the basics of API REST protocols. This library contains two elements:\nit, which is the Eigen library. This API REST interface exposes functionalities such as\nadding, subtracting and multiplying Eigen::VectorXd and Eigen::MatrixXd in a simple way.\nWhen using the client library, you do not need to know the specifics of the API REST interface.\nTo run this demo, you must deploy a server. When the docs are generated\n(via workflows), the server is deployed as a service to compile the example. However, if you\nare planning on running the example on your own, you must deploy it manually by running these commands\non a different Python terminal:\nOnce the server is up and running, you can import your client:\nAPI Eigen Example - REST Demo using Python\nEigen::VectorXd\nEigen::MatrixXd"
    },
    {
        "objectID": "examples/00-rest-examples/python_rest_demo",
        "href": "examples/00-rest-examples/python_rest_demo.html#the-demorestclient",
        "title": "API Eigen Example - REST Demo using Python > The DemoRESTClient",
        "section": "The DemoRESTClient",
        "text": "The DemoRESTClient class handles the API REST interface with the server,\ntogether with the connection itself, the formatting of the request, and more. When\nconstructing the class, you must provide as inputs the host and port of the server. For this\ndemo, since the server is already deployed (either manually or as a service in a container),\nuse the following arguments:\nHost: http://127.0.0.1\nPort: 5000\nThe server is exposed by IP 127.0.0.1 and port 5000 as per defined in the Dockerfile of the server\n(or if deployed manually, as specified previously). Thus, the previous inputs should be provided.\nThe DemoRESTClient class also allows for basic authentication in case the server was to be protected.\nSee below how to provide the user and pwd in this example:\nThe DemoRESTClient also has a method for retrieving the connection details of the client:\nNow, perform a simple operation like adding two 1D numpy.ndarrays. Start by defining them:\nThe DemoRESTClient\nDemoRESTClient\nhost\nport\nDemoRESTClient\nuser\npwd\nDemoRESTClient"
    },
    {
        "objectID": "examples/00-rest-examples/python_rest_demo",
        "href": "examples/00-rest-examples/python_rest_demo.html#performing-rest-interaction",
        "title": "API Eigen Example - REST Demo using Python > Performing REST interaction",
        "section": "Performing REST interaction",
        "text": "Explanations follow for the typical process of all interface methods (add(), subtract() and multiply()):\nThe client performs some sanity checks to confirm that the inputs provided are as expected. This demo has some limitations, such as only allowing 1D and 2D numpy.ndarrays of the float64 type. However, to interact directly with the server, you must take other considerations into account regarding the format of your requests, which is why a client library is used).\nPOST to ${server-uri}/${resource} –> In the demo: http://127.0.0.1:5000/Vectors\nThe Demo server has two resources implemented: Matrices and Vectors. Hence, it can handle only 1D and 2D numpy.ndarrays.\nImagine if you were to use CURL commands. The POST request for your first vector would look something like this:\ncurl -X POST \"http://127.0.0.1:5000/Vectors\" -H \"Content-Type: application/json\" -d '{\"value\":[5, 23, 3, 4]}'\n{\"vector\" : {\"id\" : 1235412 }}\nThe server contains a database (DB) in which the resources posted are stored and retrieved from.\nGET to ${server-uri}/${operation}/${resource} –> In the demo: http://127.0.0.1:5000/add/Vectors\nImagine if you were to use CURL commands. The GET request for adding two vectors would look something like this:\ncurl -X GET \"http://127.0.0.1:5000/add/Vectors\" -H \"Content-Type: application/json\" -d '{\"id1\":1, \"id2\":2}'\nThe server then interacts with the DB, retrieves the vectors, calls the Eigen library (via a dedicated wrapper using pybind11), performs the operation, and returns the result.\n{\"vector-addition\" : {\"result\" : [2.0, 3.0, 5.0, 4.0] }}\nThe dedicated client implemented then parses this JSON string and transforms the resulting value into a numpy.ndarray.\nThis way, you call the client library with numpy.ndarrays and retrieve numpy.ndarrays without having to know the specifics of the interface.\nAs mentioned before, there are several other methods implemented:\nHere are some operations with 2D numpy.ndarrays (matrices)\nTotal running time of the script: (0 minutes 0.076 seconds)\nDownload Jupyter notebook: python_rest_demo.ipynb\nDownload Python source code: python_rest_demo.py\nDownload zipped: python_rest_demo.zip\nGallery generated by Sphinx-Gallery\nPerforming REST interaction\nadd()\nsubtract()\nmultiply()\nPOST\n${server-uri}/${resource}\nhttp://127.0.0.1:5000/Vectors\nMatrices\nVectors\ncurl -X POST \"http://127.0.0.1:5000/Vectors\" -H \"Content-Type: application/json\" -d '{\"value\":[5, 23, 3, 4]}'\n{\"vector\" : {\"id\" : 1235412 }}\nGET\n${server-uri}/${operation}/${resource}\nhttp://127.0.0.1:5000/add/Vectors\ncurl -X GET \"http://127.0.0.1:5000/add/Vectors\" -H \"Content-Type: application/json\" -d '{\"id1\":1, \"id2\":2}'\n{\"vector-addition\" : {\"result\" : [2.0, 3.0, 5.0, 4.0] }}\nDownload Jupyter notebook: python_rest_demo.ipynb\nDownload Python source code: python_rest_demo.py\nDownload zipped: python_rest_demo.zip"
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#c-rest-server-module",
        "title": "C++ REST server module",
        "section": "C++ REST server module",
        "text": "Namespace including the API Eigen Example Server implemented in C++. \nClass for deploying the API Eigen Example Server via its serve() method. \nConstruct a new GRPCServer object. \nDestroy the GRPCServer object. \nMethod for serving our application. \nhost – the host (DNS/IP) in which we want to server our app. Default: 0.0.0.0. \nport – the port in which we want to server our app. Default: 50000. \ndebug_log – whether to show the enhanced debugging logs or not. \nPointer to the server instance. Required for shutting down when cancelled. \nC++ REST server module"
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#_CPPv4N5ansys4grpc6serverE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4grpc6serverE",
        "section": "C++ REST server module > _CPPv4N5ansys4grpc6serverE",
        "text": "namespace server\n\nNamespace including the API Eigen Example Server implemented in C++. \n\n\n\nclass GRPCServer\n\nClass for deploying the API Eigen Example Server via its serve() method. \n\nPublic Functions\n\n\n\nGRPCServer()\n\nConstruct a new GRPCServer object. \n\n\n\n~GRPCServer()\n\nDestroy the GRPCServer object. \n\n\n\nvoid serve(const std::string host = std::string{\"0.0.0.0\"}, const int port = 50000, const bool debug_log = false)\n\nMethod for serving our application. \n\nParameters\n\nhost – the host (DNS/IP) in which we want to server our app. Default: 0.0.0.0. \n\nport – the port in which we want to server our app. Default: 50000. \n\ndebug_log – whether to show the enhanced debugging logs or not. \n\nPrivate Members\n\n\n\nstd::unique_ptr<::grpc::Server> _server\n\nPointer to the server instance. Required for shutting down when cancelled. "
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#_CPPv4N5ansys4grpc6server10GRPCServerE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServerE",
        "section": "C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServerE",
        "text": "class GRPCServer\n\nClass for deploying the API Eigen Example Server via its serve() method. \n\nPublic Functions\n\n\n\nGRPCServer()\n\nConstruct a new GRPCServer object. \n\n\n\n~GRPCServer()\n\nDestroy the GRPCServer object. \n\n\n\nvoid serve(const std::string host = std::string{\"0.0.0.0\"}, const int port = 50000, const bool debug_log = false)\n\nMethod for serving our application. \n\nParameters\n\nhost – the host (DNS/IP) in which we want to server our app. Default: 0.0.0.0. \n\nport – the port in which we want to server our app. Default: 50000. \n\ndebug_log – whether to show the enhanced debugging logs or not. \n\nPrivate Members\n\n\n\nstd::unique_ptr<::grpc::Server> _server\n\nPointer to the server instance. Required for shutting down when cancelled. "
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#_CPPv4N5ansys4grpc6server10GRPCServer10GRPCServerEv",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServer10GRPCServerEv",
        "section": "C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServer10GRPCServerEv",
        "text": "GRPCServer()\n\nConstruct a new GRPCServer object. "
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#_CPPv4N5ansys4grpc6server10GRPCServerD0Ev",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServerD0Ev",
        "section": "C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServerD0Ev",
        "text": "~GRPCServer()\n\nDestroy the GRPCServer object. "
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#_CPPv4N5ansys4grpc6server10GRPCServer5serveEKNSt6stringEKiKb",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServer5serveEKNSt6stringEKiKb",
        "section": "C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServer5serveEKNSt6stringEKiKb",
        "text": "void serve(const std::string host = std::string{\"0.0.0.0\"}, const int port = 50000, const bool debug_log = false)\n\nMethod for serving our application. \n\nParameters\n\nhost – the host (DNS/IP) in which we want to server our app. Default: 0.0.0.0. \n\nport – the port in which we want to server our app. Default: 50000. \n\ndebug_log – whether to show the enhanced debugging logs or not. "
    },
    {
        "objectID": "api/cpp-grpc/server",
        "href": "api/cpp-grpc/server.html#_CPPv4N5ansys4grpc6server10GRPCServer7_serverE",
        "title": "C++ REST server module > C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServer7_serverE",
        "section": "C++ REST server module > _CPPv4N5ansys4grpc6server10GRPCServer7_serverE",
        "text": "std::unique_ptr<::grpc::Server> _server\n\nPointer to the server instance. Required for shutting down when cancelled. "
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Add examples here for the API Eigen Examples project.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#api-eigen-example---rest-demo",
        "title": "Examples > API Eigen Example - REST Demo",
        "section": "API Eigen Example - REST Demo",
        "text": "These examples demonstrate full examples of API REST interaction between a server and a client.\nsphx_glr_examples_00-rest-examples_python_rest_demo.py\nAPI Eigen Example - REST Demo"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#api-eigen-example---grpc-demo",
        "title": "Examples > API Eigen Example - gRPC Demo",
        "section": "API Eigen Example - gRPC Demo",
        "text": "These examples demonstrate full examples of API gRPC interaction between a server and a client.\nsphx_glr_examples_01-grpc-examples_python_grpc_demo.py\nGallery generated by Sphinx-Gallery\nAPI Eigen Example - gRPC Demo"
    },
    {
        "objectID": "api/python-rest/index",
        "href": "api/python-rest/index.html#python-rest-subpackage",
        "title": "Python REST subpackage",
        "section": "Python REST subpackage",
        "text": "The Python REST subpackage contains the needed elements for client-server interaction using REST.\nPython REST subpackage"
    }
]