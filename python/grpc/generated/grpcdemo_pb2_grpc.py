# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import python.grpc.generated.grpcdemo_pb2 as grpcdemo__pb2


class GRPCDemoStub(object):
    """================================================================================
    DEMO SERVICE for API Eigen Example
    ================================================================================

    Interface exported by the server. Different to REST... we do not require to post
    (i.e. store) in the end server the Objects of the interface (e.g. Vector, Matrix)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/grpcdemo.GRPCDemo/SayHello',
                request_serializer=grpcdemo__pb2.HelloRequest.SerializeToString,
                response_deserializer=grpcdemo__pb2.HelloReply.FromString,
                )
        self.FlipVector = channel.unary_unary(
                '/grpcdemo.GRPCDemo/FlipVector',
                request_serializer=grpcdemo__pb2.Vector.SerializeToString,
                response_deserializer=grpcdemo__pb2.Vector.FromString,
                )
        self.AddVectors = channel.stream_unary(
                '/grpcdemo.GRPCDemo/AddVectors',
                request_serializer=grpcdemo__pb2.Vector.SerializeToString,
                response_deserializer=grpcdemo__pb2.Vector.FromString,
                )
        self.MultiplyVectors = channel.stream_unary(
                '/grpcdemo.GRPCDemo/MultiplyVectors',
                request_serializer=grpcdemo__pb2.Vector.SerializeToString,
                response_deserializer=grpcdemo__pb2.Vector.FromString,
                )
        self.AddMatrices = channel.stream_unary(
                '/grpcdemo.GRPCDemo/AddMatrices',
                request_serializer=grpcdemo__pb2.Matrix.SerializeToString,
                response_deserializer=grpcdemo__pb2.Matrix.FromString,
                )
        self.MultiplyMatrices = channel.stream_unary(
                '/grpcdemo.GRPCDemo/MultiplyMatrices',
                request_serializer=grpcdemo__pb2.Matrix.SerializeToString,
                response_deserializer=grpcdemo__pb2.Matrix.FromString,
                )


class GRPCDemoServicer(object):
    """================================================================================
    DEMO SERVICE for API Eigen Example
    ================================================================================

    Interface exported by the server. Different to REST... we do not require to post
    (i.e. store) in the end server the Objects of the interface (e.g. Vector, Matrix)
    """

    def SayHello(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlipVector(self, request, context):
        """Flips a vector [A, B, C, D] --> [D, C, B, A]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddVectors(self, request_iterator, context):
        """Adds two vectors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiplyVectors(self, request_iterator, context):
        """Vector dot product
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMatrices(self, request_iterator, context):
        """Adds two matrices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiplyMatrices(self, request_iterator, context):
        """Multiplies two matrices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPCDemoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=grpcdemo__pb2.HelloRequest.FromString,
                    response_serializer=grpcdemo__pb2.HelloReply.SerializeToString,
            ),
            'FlipVector': grpc.unary_unary_rpc_method_handler(
                    servicer.FlipVector,
                    request_deserializer=grpcdemo__pb2.Vector.FromString,
                    response_serializer=grpcdemo__pb2.Vector.SerializeToString,
            ),
            'AddVectors': grpc.stream_unary_rpc_method_handler(
                    servicer.AddVectors,
                    request_deserializer=grpcdemo__pb2.Vector.FromString,
                    response_serializer=grpcdemo__pb2.Vector.SerializeToString,
            ),
            'MultiplyVectors': grpc.stream_unary_rpc_method_handler(
                    servicer.MultiplyVectors,
                    request_deserializer=grpcdemo__pb2.Vector.FromString,
                    response_serializer=grpcdemo__pb2.Vector.SerializeToString,
            ),
            'AddMatrices': grpc.stream_unary_rpc_method_handler(
                    servicer.AddMatrices,
                    request_deserializer=grpcdemo__pb2.Matrix.FromString,
                    response_serializer=grpcdemo__pb2.Matrix.SerializeToString,
            ),
            'MultiplyMatrices': grpc.stream_unary_rpc_method_handler(
                    servicer.MultiplyMatrices,
                    request_deserializer=grpcdemo__pb2.Matrix.FromString,
                    response_serializer=grpcdemo__pb2.Matrix.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcdemo.GRPCDemo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCDemo(object):
    """================================================================================
    DEMO SERVICE for API Eigen Example
    ================================================================================

    Interface exported by the server. Different to REST... we do not require to post
    (i.e. store) in the end server the Objects of the interface (e.g. Vector, Matrix)
    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.GRPCDemo/SayHello',
            grpcdemo__pb2.HelloRequest.SerializeToString,
            grpcdemo__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FlipVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.GRPCDemo/FlipVector',
            grpcdemo__pb2.Vector.SerializeToString,
            grpcdemo__pb2.Vector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddVectors(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpcdemo.GRPCDemo/AddVectors',
            grpcdemo__pb2.Vector.SerializeToString,
            grpcdemo__pb2.Vector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiplyVectors(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpcdemo.GRPCDemo/MultiplyVectors',
            grpcdemo__pb2.Vector.SerializeToString,
            grpcdemo__pb2.Vector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMatrices(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpcdemo.GRPCDemo/AddMatrices',
            grpcdemo__pb2.Matrix.SerializeToString,
            grpcdemo__pb2.Matrix.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiplyMatrices(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpcdemo.GRPCDemo/MultiplyMatrices',
            grpcdemo__pb2.Matrix.SerializeToString,
            grpcdemo__pb2.Matrix.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
