name: GitHub Actions

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: '3.9'

jobs:
  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v1
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: pyansys/actions/doc-style@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  python-smoke-test:
    name: Python - Smoke Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install eigen library
        run: |
          sudo apt update
          sudo apt install libeigen3-dev

      - name: Install demo-eigen-wrapper
        run: |
          pip install -r requirements/requirements_eigen_wrapper.txt ./src/ansys/eigen/cpp/eigen-wrapper

      - name: Install api-eigen-example
        run: |
          pip install -r requirements/requirements_build.txt .

      - name: Test import
        run: |
          python -c "from ansys.eigen.python.rest.client import DemoRESTClient; cli = DemoRESTClient('0.0.0.0', 5000); cli.get_connection_details()"

  python-build-test:
    name: Python - Build and Unit Testing
    needs: [python-smoke-test, style]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install OS packages
        run: |
          sudo apt install libeigen3-dev

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install packages
        run: |
          pip install -r requirements/requirements_eigen_wrapper.txt ./src/ansys/eigen/cpp/eigen-wrapper
          pip install -r requirements/requirements_build.txt .

      - name: Unit Testing
        run: |
          pytest -v --cov=python --cov-report html:cov_html --cov-report xml

      - name: Upload Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Coverage
          path: cov_html
          retention-days: 7

  cpp-build-test-rest:
    name: C++ - Build and Unit Testing - REST
    needs: [style]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install conan
        run: pip install conan

      - name: Build C++ REST Server
        run: |
          cd src/ansys/eigen/cpp/rest/server/build/
          conan install .. && cmake .. && cmake --build .

      #  Requires installing restclient-cpp and jsoncpp libs manually - not available in conan.io
      - name: Build C++ REST Client
        run: |
          sudo apt update && sudo apt install libcurl4-openssl-dev && cd external/restclient-cpp-v0.5.2 && ./autogen.sh && ./configure && sudo make install && cd -
          sudo apt update && cd external/jsoncpp-v1.9.5/build && cmake -DCMAKE_INSTALL_INCLUDEDIR=include/jsoncpp .. && sudo make install && cd - 
          cd src/ansys/eigen/cpp/rest/client/build/ && cmake .. && cmake --build .

  cpp-build-test-grpc:
    name: C++ - Build and Unit Testing - gRPC
    needs: [style]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [client, server]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Build C++ gRPC ${{ matrix.package }}
        run: |
          cd src/ansys/eigen/cpp/grpc/${{ matrix.package }}/
          make compile

  build-doc:
    name: Build Documentation
    needs: [docs-style, python-build-test, cpp-build-test-rest, cpp-build-test-grpc]
    runs-on: ubuntu-latest

    services:
      python-rest-server:
        image: ghcr.io/ansys/api-eigen-example/python-rest-server:latest
        ports:
          - 5000:5000
      python-grpc-server:
        image: ghcr.io/ansys/api-eigen-example/python-grpc-server:latest
        ports:
          - 50051:50051

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install project requirements
        run: |
          sudo apt install libeigen3-dev doxygen graphviz
          pip install -r requirements/requirements_eigen_wrapper.txt ./src/ansys/eigen/cpp/eigen-wrapper
          pip install -r requirements/requirements_build.txt .
          pip install -r requirements/requirements_docs.txt

      - name: Build documentation
        run: |
          make -C doc html

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Documentation
          path: doc/_build/html
          retention-days: 7

      - name: Deploy documentation to gh-pages
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.github_token }}
          branch: gh-pages
          folder: doc/_build/html
          clean: true
          single-commit: true
